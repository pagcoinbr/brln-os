services:
  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/provisioning:/etc/grafana/provisioning
      - ./monitoring/dashboards:/etc/grafana/dashboards
    ports:
      - 3010:3000
    networks:
      - grafana-net
    environment:
      - GF_INSTALL_PLUGINS=grafana-piechart-panel 1.6.4,grafana-clock-panel 2.1.3,grafana-simple-json-datasource 1.4.2
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_PLUGIN_DOWNLOAD_TIMEOUT=300s
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - prometheus_data:/etc/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - grafana-net
    command:
      - --config.file=/etc/prometheus/prometheus.yml

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - 9100:9100
    networks:
        - grafana-net

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - 3100:3100
    networks:
      - grafana-net
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    networks:
      - grafana-net
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - 5500:5432
    networks:
      - grafana-net
    volumes:
      - postgres_data:/var/lib/postgresql/data

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/postgres?sslmode=disable"
    ports:
      - 9187:9187
    networks:
      - grafana-net

  tor:
    build:
      context: .
      dockerfile: ./tor/Dockerfile.tor
    container_name: tor
    ports:
      - 9050:9050  # SOCKS proxy
      - 9051:9051  # Control port
    networks:
      - grafana-net
    volumes:
      - tor_data:/run/tor
      - tor_var:/var/lib/tor
    restart: unless-stopped

  lnd:
    build:
      context: .
      dockerfile: ./lnd/Dockerfile.lnd
    container_name: lnd
    ports:
      - 9735:9735  # P2P port
      - 10009:10009  # gRPC port
      - 8080:8080   # REST port
    networks:
      - grafana-net
    volumes:
      - /data/lnd:/data/lnd
      - tor_var:/var/lib/tor:ro
      - /data/lnd:/home/lnd/.lnd
    restart: unless-stopped
    depends_on:
      - postgres
      - tor
    environment:
      - LND_DATA=/data/lnd

  elements:
    build:
      context: .
      dockerfile: ./elements/Dockerfile.elements
    container_name: elements
    ports:
      - 7041:7041   # P2P port
      - 18884:18884 # RPC port
    networks:
      - grafana-net
    volumes:
      - /data/elements:/home/.elements
      - ./elements/elements.conf:/home/.elements/elements.conf
    restart: unless-stopped
    depends_on:
      - tor
    environment:
      - ELEMENTS_DATA=/home/.elements

  lnbits:
    build:
      context: .
      dockerfile: ./lnbits/Dockerfile.lnbits
    container_name: lnbits
    restart: unless-stopped
    ports:
      - "5000:5000"
    networks:
      - grafana-net
    volumes:
      - /data/lnbits:/data/lnbits
      - /data/lnd:/home/lnd/.lnd:ro
    environment:
      - TZ=UTC
    depends_on:
      - lnd
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  lndg:
    build:
      context: .
      dockerfile: ./lndg/Dockerfile.lndg
    container_name: lndg
    ports:
      - 8889:8889  # LNDG Web UI port
    networks:
      - grafana-net
    volumes:
      - /data/lnd:/root/.lnd:ro
      - /data/lndg:/app/data:rw
    restart: unless-stopped
    depends_on:
      - lnd
      - postgres
    environment:
      - LND_HOST=lnd:10009
      - LND_NETWORK=mainnet
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=postgres

  peerswap:
    build:
      context: .
      dockerfile: ./peerswap/Dockerfile.peerswap
    container_name: peerswap
    ports:
      - 42069:42069  # PeerSwap port
    networks:
      - grafana-net
    volumes:
      - peerswap_data:/home/peerswap/.peerswap
      - ./peerswap/peerswap.conf:/home/peerswap/.peerswap/peerswap.conf
      - /data/lnd:/home/lnd/.lnd:ro
    restart: unless-stopped
    depends_on:
      - lnd
      - elements
    environment:
      - PEERSWAP_DATA=/home/peerswap/.peerswap

  psweb:
    build:
      context: .
      dockerfile: ./psweb/Dockerfile.psweb
    container_name: psweb
    ports:
      - 1984:1984   # PeerSwap Web UI port
    networks:
      - grafana-net
    volumes:
      - psweb_data:/home/psweb/.peerswap
      - ./psweb/pswebconfig.json.example:/home/psweb/.peerswap/pswebconfig.json:ro
      - /data/lnd:/home/lnd/.lnd:ro
      - peerswap_data:/home/peerswap/.peerswap:ro
    restart: unless-stopped
    depends_on:
      - peerswap
      - lnd
      - elements
    environment:
      - PSWEB_PORT=1984
      - PEERSWAP_HOST=peerswap:42069
      - LND_HOST=lnd:10009

networks:
  grafana-net:
    driver: bridge

volumes:
  grafana_data:
  prometheus_data:
  postgres_data:
  lnd_data:
  elements_data:
  tor_data:
  tor_var:
  peerswap_data:
  psweb_data:
  lndg_data: