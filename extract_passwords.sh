#!/bin/bash

# Script para extrair senhas dos logs do Docker Compose
# Salva todas as senhas encontradas em um arquivo passwords.md

set -e

# Configura√ß√µes
COMPOSE_FILE="/home/admin/brlnfullauto/container/docker-compose.yml"
COMPOSE_DIR="/home/admin/brlnfullauto/container"
OUTPUT_FILE="/home/admin/brlnfullauto/passwords.md"
OUTPUT_TXT_FILE="/home/admin/brlnfullauto/passwords.txt"
LOG_FILE="/tmp/docker-compose-logs.txt"

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Fun√ß√£o para logging
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR $(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[WARNING $(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO $(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

# Fun√ß√£o para extrair logs
extract_logs() {
    log "Extraindo logs do Docker Compose..."
    
    cd "$COMPOSE_DIR"
    
    # Capturar logs de todos os servi√ßos
    if command -v docker-compose &> /dev/null; then
        docker-compose logs --no-color > "$LOG_FILE" 2>&1
    else
        docker compose logs --no-color > "$LOG_FILE" 2>&1
    fi
    
    log "Logs extra√≠dos para: $LOG_FILE"
}

# Fun√ß√£o para gerar o arquivo de senhas
generate_passwords_file() {
    log "Gerando arquivo de senhas..."
    
    # Criar arquivo de sa√≠da
    cat > "$OUTPUT_FILE" << 'EOF'
# üîê Senhas e Credenciais do BRLN Full Auto

Este arquivo cont√©m todas as senhas e credenciais extra√≠das dos logs durante a instala√ß√£o.

**‚ö†Ô∏è IMPORTANTE: Mantenha este arquivo seguro e fa√ßa backup em local protegido!**

---

## üìã Resumo das Senhas

### üîë Senhas Padr√£o (Definidas nos Arquivos de Configura√ß√£o)

#### üå©Ô∏è LND (Lightning Network Daemon)
- **Senha da Carteira**: `lndpassword123`
- **Arquivo de Configura√ß√£o**: `/home/admin/brlnfullauto/container/lnd/password.txt`
- **Como Alterar**: Edite o arquivo `password.txt` antes de executar o setup
- **Documenta√ß√£o**: [LND Documentation](https://docs.lightning.engineering/)

#### ‚ö° Elements (Liquid Network)
- **RPC User**: `elementsuser`
- **RPC Password**: `elementspassword123`
- **Arquivo de Configura√ß√£o**: `/home/admin/brlnfullauto/container/elements/elements.conf.example`
- **Como Alterar**: Edite o arquivo `elements.conf` antes de executar o setup
- **Documenta√ß√£o**: [Elements Documentation](https://elementsproject.org/)

#### üîÑ PeerSwap
- **Elements RPC User**: `elementsuser`
- **Elements RPC Password**: `elementspassword123`
- **Arquivo de Configura√ß√£o**: `/home/admin/brlnfullauto/container/peerswap/peerswap.conf.example`
- **Como Alterar**: Edite o arquivo `peerswap.conf` antes de executar o setup
- **Documenta√ß√£o**: [PeerSwap Documentation](https://github.com/ElementsProject/peerswap)

#### üêò PostgreSQL
- **Usu√°rio**: `postgres`
- **Senha**: `postgres`
- **Banco de Dados**: `postgres`
- **Arquivo de Configura√ß√£o**: `/home/admin/brlnfullauto/container/docker-compose.yml`
- **Como Alterar**: Edite as vari√°veis de ambiente no docker-compose.yml
- **Documenta√ß√£o**: [PostgreSQL Documentation](https://www.postgresql.org/docs/)

#### üìä Grafana
- **Usu√°rio Admin**: `admin`
- **Senha Admin**: `admin`
- **Arquivo de Configura√ß√£o**: `/home/admin/brlnfullauto/container/docker-compose.yml`
- **Como Alterar**: Edite a vari√°vel `GF_SECURITY_ADMIN_PASSWORD` no docker-compose.yml
- **Documenta√ß√£o**: [Grafana Documentation](https://grafana.com/docs/)

### üé≤ Senhas Geradas Automaticamente

EOF

    # Extrair senhas geradas automaticamente dos logs
    info "Procurando senhas geradas automaticamente nos logs..."
    
    # ThunderHub
    if grep -q "Senha gerada automaticamente" "$LOG_FILE"; then
        THUB_PASSWORD=$(grep "Senha gerada automaticamente" "$LOG_FILE" | tail -1 | sed 's/.*: //' | sed 's/\x1b\[[0-9;]*m//g')
        cat >> "$OUTPUT_FILE" << EOF

#### ‚ö° ThunderHub
- **Senha Master**: \`$THUB_PASSWORD\`
- **Usu√°rio da Conta**: \`BRLNBolt\`
- **URL de Acesso**: http://localhost:3000
- **Arquivo de Configura√ß√£o**: \`/data/thunderhub/config/thubConfig_runtime.yaml\`
- **Como Alterar**: Defina a vari√°vel \`THUB_PASSWORD\` no docker-compose.yml ou edite o arquivo de configura√ß√£o
- **Documenta√ß√£o**: [ThunderHub Documentation](https://thunderhub.io/)

EOF
    fi
    
    # LNDG (procurar por senha de admin)
    if grep -q "lndg-admin" "$LOG_FILE"; then
        cat >> "$OUTPUT_FILE" << EOF

#### üìä LNDG (Lightning Network Dashboard)
- **Usu√°rio**: \`lndg-admin\`
- **Senha**: Execute o comando abaixo para obter a senha:
\`\`\`bash
docker exec lndg cat /app/data/lndg-admin.txt
\`\`\`
- **URL de Acesso**: http://localhost:8889
- **Como Alterar**: Consulte a documenta√ß√£o oficial do LNDG
- **Documenta√ß√£o**: [LNDG Documentation](https://github.com/cryptosharks131/lndg)

EOF
    fi
    
    # LNBits (procurar por chaves de API)
    if grep -q "LNBITS_SECRET_KEY" "$LOG_FILE"; then
        cat >> "$OUTPUT_FILE" << EOF

#### üí∞ LNBits
- **URL de Acesso**: http://localhost:5000
- **Chave Secreta**: \`your-secret-key-here\` (padr√£o - ALTERE IMEDIATAMENTE!)
- **Arquivo de Configura√ß√£o**: \`/home/admin/brlnfullauto/container/docker-compose.yml\`
- **Como Alterar**: Edite a vari√°vel \`LNBITS_SECRET_KEY\` no docker-compose.yml
- **Documenta√ß√£o**: [LNBits Documentation](https://docs.lnbits.org/)

EOF
    fi
    
    # Procurar por seeds/mnemonics nos logs
    if grep -iE "(seed|mnemonic|cipher seed|recovery)" "$LOG_FILE" | grep -v "cipher seed passphrase" | grep -q "word"; then
        cat >> "$OUTPUT_FILE" << EOF

### üå± Seeds e Frases de Recupera√ß√£o

**‚ö†Ô∏è CR√çTICO: Estas seeds s√£o essenciais para recuperar suas carteiras!**

EOF
        
        # Extrair seeds do LND
        if grep -q "lnd successfully initialized" "$LOG_FILE"; then
            cat >> "$OUTPUT_FILE" << EOF

#### üå©Ô∏è LND Wallet Seed
**Esta seed foi gerada durante a cria√ß√£o da carteira LND. Salve-a em local seguro!**

EOF
            
            # Tentar extrair a seed dos logs (pode n√£o estar presente se j√° foi criada)
            if grep -A 30 -B 5 "cipher seed" "$LOG_FILE" | grep -E "^[0-9]+\." > /dev/null; then
                echo "```" >> "$OUTPUT_FILE"
                grep -A 30 -B 5 "cipher seed" "$LOG_FILE" | grep -E "^[0-9]+\." >> "$OUTPUT_FILE"
                echo "```" >> "$OUTPUT_FILE"
            else
                cat >> "$OUTPUT_FILE" << EOF
**Seed n√£o encontrada nos logs.** Isso pode ocorrer se:
- A carteira j√° foi criada anteriormente
- Os logs foram limpos
- A seed foi exibida em uma sess√£o anterior

Para recuperar a seed, voc√™ precisar√°:
1. Parar o container LND
2. Remover a carteira existente
3. Recriar a carteira manualmente

EOF
            fi
        fi
    fi
    
    # Adicionar se√ß√£o de seguran√ßa e comandos √∫teis
    cat >> "$OUTPUT_FILE" << 'EOF'

---

## üîí Seguran√ßa e Boas Pr√°ticas

### üìã Checklist de Seguran√ßa

- [ ] **Alterar todas as senhas padr√£o** antes de usar em produ√ß√£o
- [ ] **Fazer backup da seed do LND** em local seguro offline
- [ ] **Configurar firewall** para permitir apenas portas necess√°rias
- [ ] **Habilitar 2FA** onde dispon√≠vel
- [ ] **Fazer backup regular** dos dados importantes
- [ ] **Monitorar logs** regularmente para atividades suspeitas

### üõ°Ô∏è Como Alterar Senhas

#### 1. Antes da Instala√ß√£o
Edite os arquivos de configura√ß√£o apropriados antes de executar o `setup.sh`:

```bash
# Editar senha do LND
echo "nova_senha_segura" > /home/admin/brlnfullauto/container/lnd/password.txt

# Editar configura√ß√£o do Elements
nano /home/admin/brlnfullauto/container/elements/elements.conf

# Editar configura√ß√£o do PeerSwap
nano /home/admin/brlnfullauto/container/peerswap/peerswap.conf

# Editar docker-compose.yml para outras senhas
nano /home/admin/brlnfullauto/container/docker-compose.yml
```

#### 2. Ap√≥s a Instala√ß√£o
Para alterar senhas ap√≥s a instala√ß√£o, voc√™ precisar√°:

1. **Parar os servi√ßos**:
```bash
cd /home/admin/brlnfullauto/container
docker-compose down
```

2. **Alterar as configura√ß√µes**

3. **Recriar os containers**:
```bash
docker-compose up -d --force-recreate
```

### üì± Comandos √öteis

#### Ver Logs de um Servi√ßo Espec√≠fico
```bash
cd /home/admin/brlnfullauto/container
docker-compose logs -f [nome_do_servi√ßo]
```

#### Verificar Status dos Servi√ßos
```bash
cd /home/admin/brlnfullauto/container
docker-compose ps
```

#### Acessar Shell de um Container
```bash
docker exec -it [nome_do_container] /bin/bash
# ou
docker exec -it [nome_do_container] /bin/sh
```

#### Backup de Emerg√™ncia
```bash
# Backup completo dos dados
sudo tar -czf backup-brln-$(date +%Y%m%d).tar.gz /data/

# Backup apenas das configura√ß√µes
tar -czf backup-config-$(date +%Y%m%d).tar.gz /home/admin/brlnfullauto/container/
```

---

## üìû Suporte e Documenta√ß√£o

### üåê URLs de Acesso aos Servi√ßos

- **Grafana**: http://localhost:3010
- **ThunderHub**: http://localhost:3000
- **LNBits**: http://localhost:5000
- **LNDG**: http://localhost:8889
- **PeerSwap Web**: http://localhost:1984

### üìö Documenta√ß√£o Oficial

- [Bitcoin Core](https://bitcoin.org/en/bitcoin-core/)
- [LND](https://docs.lightning.engineering/)
- [Elements](https://elementsproject.org/)
- [ThunderHub](https://thunderhub.io/)
- [LNBits](https://docs.lnbits.org/)
- [LNDG](https://github.com/cryptosharks131/lndg)
- [PeerSwap](https://github.com/ElementsProject/peerswap)

### üÜò Em Caso de Problemas

1. **Verifique os logs** dos servi√ßos
2. **Consulte a documenta√ß√£o** oficial
3. **Procure por issues** nos reposit√≥rios do GitHub
4. **Fa√ßa backup** antes de fazer altera√ß√µes

---

**üìÖ Gerado em**: $(date '+%Y-%m-%d %H:%M:%S')
**üñ•Ô∏è Sistema**: $(uname -a)
**üê≥ Docker**: $(docker --version)

---

**‚ö†Ô∏è LEMBRETE IMPORTANTE**: Este arquivo cont√©m informa√ß√µes sens√≠veis. Mantenha-o seguro e n√£o o compartilhe publicamente!

EOF
    
    log "Arquivo de senhas gerado: $OUTPUT_FILE"
    
    # Gerar arquivo TXT simplificado
    generate_simple_txt_file
}

# Fun√ß√£o para exibir resumo
show_summary() {
    info "=== RESUMO DA EXTRA√á√ÉO DE SENHAS ==="
    echo ""
    info "üìÅ Arquivos gerados:"
    echo "  üìÑ Arquivo completo (Markdown): $OUTPUT_FILE"
    echo "  üìÑ Arquivo simplificado (TXT): $OUTPUT_TXT_FILE"
    echo ""
    info "üîë Senhas encontradas:"
    
    # Contar senhas encontradas
    local count=0
    
    if grep -q "lndpassword123" "$OUTPUT_FILE"; then
        echo "  ‚úì LND Wallet Password"
        ((count++))
    fi
    
    if grep -q "elementspassword123" "$OUTPUT_FILE"; then
        echo "  ‚úì Elements RPC Password"
        ((count++))
    fi
    
    if grep -q "postgres" "$OUTPUT_FILE"; then
        echo "  ‚úì PostgreSQL Password"
        ((count++))
    fi
    
    if grep -q "admin" "$OUTPUT_FILE"; then
        echo "  ‚úì Grafana Admin Password"
        ((count++))
    fi
    
    if grep -q "Senha gerada automaticamente" "$LOG_FILE"; then
        echo "  ‚úì ThunderHub Password (gerada automaticamente)"
        ((count++))
    fi
    
    echo ""
    info "üìä Total de credenciais documentadas: $count"
    echo ""
    warning "üîí IMPORTANTE: Leia os arquivos gerados e altere as senhas padr√£o!"
    echo ""
    info "üìñ Para visualizar os arquivos:"
    echo "  cat $OUTPUT_FILE"
    echo "  cat $OUTPUT_TXT_FILE"
    echo ""
    info "üìù Para editar os arquivos:"
    echo "  nano $OUTPUT_FILE"
    echo "  nano $OUTPUT_TXT_FILE"
    echo ""
}

# Fun√ß√£o para exibir conte√∫do formatado para terminal
display_passwords() {
    echo "=== ARQUIVO MARKDOWN COMPLETO ==="
    if [[ -f "$OUTPUT_FILE" ]]; then
        cat "$OUTPUT_FILE"
    else
        echo "‚ùå Arquivo de senhas n√£o encontrado: $OUTPUT_FILE"
    fi
    
    echo ""
    echo "=== ARQUIVO TXT SIMPLIFICADO ==="
    if [[ -f "$OUTPUT_TXT_FILE" ]]; then
        cat "$OUTPUT_TXT_FILE"
    else
        echo "‚ùå Arquivo de senhas TXT n√£o encontrado: $OUTPUT_TXT_FILE"
    fi
}

# Fun√ß√£o para gerar arquivo TXT simplificado
generate_simple_txt_file() {
    log "Gerando arquivo TXT simplificado..."
    
    # Criar arquivo TXT de sa√≠da
    cat > "$OUTPUT_TXT_FILE" << EOF
=== BRLN Full Auto - Senhas e Credenciais ===
Gerado em: $(date '+%Y-%m-%d %H:%M:%S')

IMPORTANTE: Mantenha este arquivo seguro e fa√ßa backup!

=== SENHAS PADRAO ===

LND (Lightning Network):
- Senha da Carteira: lndpassword123
- Arquivo: /home/admin/brlnfullauto/container/lnd/password.txt

Elements (Liquid Network):
- RPC User: elementsuser
- RPC Password: elementspassword123
- Arquivo: /home/admin/brlnfullauto/container/elements/elements.conf

PeerSwap:
- Elements RPC User: elementsuser
- Elements RPC Password: elementspassword123
- Arquivo: /home/admin/brlnfullauto/container/peerswap/peerswap.conf

PostgreSQL:
- Usuario: postgres
- Senha: postgres
- Banco: postgres

Grafana:
- Usuario Admin: admin
- Senha Admin: admin

=== SENHAS GERADAS AUTOMATICAMENTE ===

EOF

    # Extrair ThunderHub password
    if grep -q "Senha gerada automaticamente" "$LOG_FILE"; then
        THUB_PASSWORD=$(grep "Senha gerada automaticamente" "$LOG_FILE" | tail -1 | sed 's/.*: //' | sed 's/\x1b\[[0-9;]*m//g')
        cat >> "$OUTPUT_TXT_FILE" << EOF
ThunderHub:
- Senha Master: $THUB_PASSWORD
- Usuario da Conta: BRLNBolt
- URL: http://localhost:3000

EOF
    fi
    
    # LNDG
    if grep -q "lndg-admin" "$LOG_FILE"; then
        cat >> "$OUTPUT_TXT_FILE" << EOF
LNDG (Lightning Network Dashboard):
- Usuario: lndg-admin
- Senha: Execute 'docker exec lndg cat /app/data/lndg-admin.txt'
- URL: http://localhost:8889

EOF
    fi
    
    # LNBits
    if grep -q "LNBITS_SECRET_KEY" "$LOG_FILE"; then
        cat >> "$OUTPUT_TXT_FILE" << EOF
LNBits:
- URL: http://localhost:5000
- Chave Secreta: your-secret-key-here (ALTERE IMEDIATAMENTE!)

EOF
    fi
    
    # Verificar se h√° seeds nos logs
    if grep -iE "(seed|mnemonic|cipher seed|recovery)" "$LOG_FILE" | grep -v "cipher seed passphrase" | grep -q "word"; then
        cat >> "$OUTPUT_TXT_FILE" << EOF

=== SEEDS E FRASES DE RECUPERACAO ===

CRITICO: Estas seeds sao essenciais para recuperar suas carteiras!

EOF
        
        # Extrair seeds do LND
        if grep -q "lnd successfully initialized" "$LOG_FILE"; then
            cat >> "$OUTPUT_TXT_FILE" << EOF
LND Wallet Seed:
Esta seed foi gerada durante a criacao da carteira LND. Salve em local seguro!

EOF
            
            # Tentar extrair a seed dos logs
            if grep -A 30 -B 5 "cipher seed" "$LOG_FILE" | grep -E "^[0-9]+\." > /dev/null; then
                echo "Seed LND:" >> "$OUTPUT_TXT_FILE"
                grep -A 30 -B 5 "cipher seed" "$LOG_FILE" | grep -E "^[0-9]+\." | sed 's/\x1b\[[0-9;]*m//g' >> "$OUTPUT_TXT_FILE"
                echo "" >> "$OUTPUT_TXT_FILE"
            else
                cat >> "$OUTPUT_TXT_FILE" << EOF
Seed nao encontrada nos logs. Isso pode ocorrer se:
- A carteira ja foi criada anteriormente
- Os logs foram limpos
- A seed foi exibida em uma sessao anterior

EOF
            fi
        fi
    fi
    
    # Adicionar URLs de acesso
    cat >> "$OUTPUT_TXT_FILE" << EOF

=== URLS DE ACESSO ===

- Grafana: http://localhost:3010
- ThunderHub: http://localhost:3000
- LNBits: http://localhost:5000
- LNDG: http://localhost:8889
- PeerSwap Web: http://localhost:1984

=== COMANDOS UTEIS ===

Ver logs de um servico:
cd /home/admin/brlnfullauto/container && docker-compose logs -f [nome_do_servico]

Verificar status dos servicos:
cd /home/admin/brlnfullauto/container && docker-compose ps

Acessar shell de um container:
docker exec -it [nome_do_container] /bin/bash

Backup de emergencia:
sudo tar -czf backup-brln-$(date +%Y%m%d).tar.gz /data/

=== LEMBRETE IMPORTANTE ===

Este arquivo contem informacoes sensiveis. Mantenha seguro e nao compartilhe!

EOF
    
    log "Arquivo TXT simplificado gerado: $OUTPUT_TXT_FILE"
}

# Fun√ß√£o principal
main() {
    # Verificar se foi chamado com par√¢metro --display-only
    if [[ "$1" == "--display-only" ]]; then
        display_passwords
        exit 0
    fi
    
    log "=== BRLN Full Auto - Extra√ß√£o de Senhas ==="
    echo ""
    
    # Verificar se o diret√≥rio do docker-compose existe
    if [[ ! -d "$COMPOSE_DIR" ]]; then
        error "Diret√≥rio n√£o encontrado: $COMPOSE_DIR"
        exit 1
    fi
    
    # Verificar se o docker-compose.yml existe
    if [[ ! -f "$COMPOSE_FILE" ]]; then
        error "Arquivo n√£o encontrado: $COMPOSE_FILE"
        exit 1
    fi
    
    # Extrair logs
    extract_logs
    
    # Gerar arquivo de senhas
    generate_passwords_file
    
    # Exibir resumo
    show_summary
    
    log "‚úÖ Processo conclu√≠do com sucesso!"
}

# Executar fun√ß√£o principal
main "$@"
