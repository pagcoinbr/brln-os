#!/bin/bash

# Script para verificar e corrigir permiss√µes dos diret√≥rios do LND
set -euo pipefail

# Source das fun√ß√µes b√°sicas
source "$(dirname "$0")/.env"
basics

# Vari√°veis
REPO_DIR="/root/brln-os"
CONTAINER_DIR="$REPO_DIR/container"
LND_DATA_DIR="/data/lnd"

# Fun√ß√£o para verificar se Docker est√° instalado
check_docker() {
    if ! command -v docker &> /dev/null; then
        error "Docker n√£o est√° instalado!"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose n√£o est√° instalado!"
        exit 1
    fi
    
    log "‚úÖ Docker e Docker Compose encontrados"
}

# Fun√ß√£o para obter UID/GID do usu√°rio LND no container
get_lnd_uid_gid() {
    log "üîç Verificando UID/GID do usu√°rio LND no container..."
    
    cd "$CONTAINER_DIR"
    
    # Tentar obter UID/GID executando um container tempor√°rio
    local uid_gid_output
    uid_gid_output=$(docker-compose run --rm lnd id lnd 2>/dev/null || echo "")
    
    if [[ -n "$uid_gid_output" ]]; then
        # Extrair UID e GID do output (formato: uid=1000(lnd) gid=1000(lnd) ...)
        LND_UID=$(echo "$uid_gid_output" | grep -o 'uid=[0-9]*' | cut -d'=' -f2)
        LND_GID=$(echo "$uid_gid_output" | grep -o 'gid=[0-9]*' | cut -d'=' -f2)
        
        if [[ -n "$LND_UID" && -n "$LND_GID" ]]; then
            log "‚úÖ Usu√°rio LND encontrado: UID=$LND_UID, GID=$LND_GID"
            return 0
        fi
    fi
    
    error "‚ùå N√£o foi poss√≠vel determinar UID/GID do usu√°rio LND"
    error "Verifique se o Dockerfile.lnd est√° correto e se a imagem pode ser constru√≠da"
    exit 1
}

# Fun√ß√£o para verificar permiss√µes atuais
check_current_permissions() {
    log "üìã Verificando permiss√µes atuais do diret√≥rio $LND_DATA_DIR..."
    
    if [[ ! -d "$LND_DATA_DIR" ]]; then
        warning "‚ö†Ô∏è Diret√≥rio $LND_DATA_DIR n√£o existe. Ser√° criado."
        return 1
    fi
    
    # Obter informa√ß√µes do diret√≥rio
    local dir_info=$(ls -ld "$LND_DATA_DIR" 2>/dev/null)
    local current_owner=$(stat -c '%u:%g' "$LND_DATA_DIR" 2>/dev/null)
    
    log "üìÇ Informa√ß√µes atuais do diret√≥rio:"
    log "   Caminho: $LND_DATA_DIR"
    log "   Permiss√µes: $dir_info"
    log "   Propriet√°rio (UID:GID): $current_owner"
    
    # Verificar se as permiss√µes est√£o corretas
    if [[ "$current_owner" == "$LND_UID:$LND_GID" ]]; then
        log "‚úÖ Permiss√µes est√£o corretas!"
        return 0
    else
        warning "‚ö†Ô∏è Permiss√µes precisam ser corrigidas"
        warning "   Atual: $current_owner"
        warning "   Necess√°rio: $LND_UID:$LND_GID"
        return 1
    fi
}

# Fun√ß√£o para criar e configurar diret√≥rios
fix_directory_permissions() {
    log "üîß Corrigindo permiss√µes do diret√≥rio $LND_DATA_DIR..."
    
    # Criar diret√≥rio se n√£o existir
    if [[ ! -d "$LND_DATA_DIR" ]]; then
        log "üìÅ Criando diret√≥rio $LND_DATA_DIR..."
        mkdir -p "$LND_DATA_DIR"
    fi
    
    # Criar subdirs necess√°rios
    log "üìÅ Criando subdiret√≥rios necess√°rios..."
    mkdir -p "$LND_DATA_DIR/data"
    mkdir -p "$LND_DATA_DIR/data/chain"
    mkdir -p "$LND_DATA_DIR/data/chain/bitcoin"
    mkdir -p "$LND_DATA_DIR/data/chain/bitcoin/mainnet"
    mkdir -p "$LND_DATA_DIR/logs"
    
    # Corrigir ownership
    log "üë§ Corrigindo propriet√°rio para UID:GID $LND_UID:$LND_GID..."
    chown -R "$LND_UID:$LND_GID" "$LND_DATA_DIR"
    
    # Definir permiss√µes adequadas
    log "üîê Definindo permiss√µes 755..."
    chmod -R 755 "$LND_DATA_DIR"
    
    # Verificar se foi aplicado corretamente
    local new_owner=$(stat -c '%u:%g' "$LND_DATA_DIR" 2>/dev/null)
    if [[ "$new_owner" == "$LND_UID:$LND_GID" ]]; then
        log "‚úÖ Permiss√µes corrigidas com sucesso!"
        log "   Novo propriet√°rio: $new_owner"
    else
        error "‚ùå Falha ao corrigir permiss√µes"
        error "   Esperado: $LND_UID:$LND_GID"
        error "   Atual: $new_owner"
        exit 1
    fi
}

# Fun√ß√£o para verificar arquivos de configura√ß√£o
check_config_files() {
    log "üìÑ Verificando arquivos de configura√ß√£o..."
    
    local files_to_check=(
        "$LND_DATA_DIR/lnd.conf"
        "$LND_DATA_DIR/password.txt"
    )
    
    for file in "${files_to_check[@]}"; do
        if [[ -f "$file" ]]; then
            local file_owner=$(stat -c '%u:%g' "$file" 2>/dev/null)
            if [[ "$file_owner" != "$LND_UID:$LND_GID" ]]; then
                log "üîß Corrigindo propriet√°rio de $file..."
                chown "$LND_UID:$LND_GID" "$file"
            fi
            log "‚úÖ $file - propriet√°rio correto"
        else
            info "‚ÑπÔ∏è $file - n√£o existe (ser√° criado pelo container)"
        fi
    done
}

# Fun√ß√£o para exibir resumo final
show_summary() {
    echo ""
    log "üìä RESUMO DAS PERMISS√ïES:"
    echo "=================================="
    
    # Mostrar informa√ß√µes do diret√≥rio principal
    local dir_info=$(ls -ld "$LND_DATA_DIR" 2>/dev/null)
    log "üìÇ Diret√≥rio principal: $LND_DATA_DIR"
    log "   $dir_info"
    
    # Mostrar subdirs importantes
    local subdirs=(
        "$LND_DATA_DIR/data"
        "$LND_DATA_DIR/data/chain/bitcoin/mainnet"
        "$LND_DATA_DIR/logs"
    )
    
    for subdir in "${subdirs[@]}"; do
        if [[ -d "$subdir" ]]; then
            local subdir_info=$(ls -ld "$subdir" 2>/dev/null)
            log "   ‚îî‚îÄ‚îÄ $(basename "$subdir"): $(echo "$subdir_info" | awk '{print $1, $3":"$4}')"
        fi
    done
    
    # Mostrar arquivos de configura√ß√£o
    echo ""
    log "üìÑ Arquivos de configura√ß√£o:"
    local config_files=(
        "$LND_DATA_DIR/lnd.conf"
        "$LND_DATA_DIR/password.txt"
    )
    
    for file in "${config_files[@]}"; do
        if [[ -f "$file" ]]; then
            local file_info=$(ls -l "$file" 2>/dev/null)
            log "   ‚úÖ $(basename "$file"): $(echo "$file_info" | awk '{print $1, $3":"$4}')"
        else
            log "   ‚ûñ $(basename "$file"): n√£o existe"
        fi
    done
    
    echo "=================================="
    log "‚úÖ Verifica√ß√£o de permiss√µes conclu√≠da!"
    echo ""
}

# Fun√ß√£o principal
main() {
    echo ""
    log "üîß CORRE√á√ÉO DE PERMISS√ïES DO LND"
    log "=================================="
    echo ""
    
    # Verificar depend√™ncias
    check_docker
    
    # Obter UID/GID do usu√°rio LND
    get_lnd_uid_gid
    
    # Verificar permiss√µes atuais
    if ! check_current_permissions; then
        echo ""
        info "üîß Permiss√µes precisam ser corrigidas."
        read -p "Deseja corrigir as permiss√µes agora? (Y/n): " -n 1 -r
        echo
        
        if [[ $REPLY =~ ^[Nn]$ ]]; then
            warning "‚ö†Ô∏è Permiss√µes n√£o foram corrigidas. O LND pode falhar ao iniciar."
            exit 1
        fi
        
        # Corrigir permiss√µes
        fix_directory_permissions
    fi
    
    # Verificar arquivos de configura√ß√£o
    check_config_files
    
    # Exibir resumo
    show_summary
    
    echo ""
    info "üí° Agora voc√™ pode iniciar os containers com seguran√ßa:"
    echo "   cd $CONTAINER_DIR"
    echo "   docker-compose up -d lnd"
    echo ""
}

# Executar se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
