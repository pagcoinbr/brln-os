#!/bin/bash

# Source das fun√ß√µes b√°sicas
source "$(dirname "$0")/basic.sh"
basics

app="lnd"
REPO_DIR="/home/$USER/brln-os"
brln_credentials() {
    echo ""
    log "üîë Configura√ß√£o das credenciais BRLN Club"
    echo ""
    
    # Solicitar credenciais
    echo "Digite as credenciais fornecidas pela BRLN Club:"
    echo ""
    
    while true; do
        read -p "üë§ Usu√°rio RPC: " brln_rpc_user
        if [[ -n "$brln_rpc_user" ]]; then
            break
        else
            error "Usu√°rio n√£o pode estar vazio!"
        fi
    done
    
    while true; do
        read -p "üîê Senha RPC: " brln_rpc_pass
        echo
        if [[ -n "$brln_rpc_pass" ]]; then
            break
        else
            error "Senha n√£o pode estar vazia!"
        fi
    done
    
    echo ""
    log "‚úÖ Credenciais capturadas com sucesso!"
    
    # Configurar arquivos
    configure_lnd_conf "$brln_rpc_user" "$brln_rpc_pass"
    configure_elements "$brln_rpc_user" "$brln_rpc_pass"
    
    log "üéØ Configura√ß√£o remota conclu√≠da!"
    echo ""
    info "Os arquivos foram configurados para usar a blockchain remota da BRLN Club."
    warning "‚ö†Ô∏è  Certifique-se de que as credenciais est√£o corretas antes de iniciar os containers."
    echo ""
}
# Fun√ß√£o para configurar blockchain remota
configure_remote_blockchain() {
    sudo -v
    echo ""
    info "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    log "üîó Configura√ß√£o da Fonte Blockchain"
    info "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo ""
    
    info "Escolha a fonte da blockchain que deseja usar:"
    echo ""
    echo "y. ‚òÅÔ∏è  Blockchain Remota BRLN Club"
    echo "   ‚Ä¢ Conecta ao node Bitcoin da BRLN Club"
    echo "   ‚Ä¢ Sincroniza√ß√£o mais r√°pida"
    echo "   ‚Ä¢ Requer credenciais da BRLN Club"
    echo ""
    echo "n. üè† Blockchain Local (Padr√£o)"
    echo "   ‚Ä¢ Sincroniza√ß√£o completa da blockchain Bitcoin"
    echo "   ‚Ä¢ Maior privacidade e controle total"
    echo "   ‚Ä¢ Requer mais tempo e espa√ßo em disco"
    echo ""
    
    while true; do
        read -p "Deseja usar a blockchain remota da BRLN Club? (y/N): " -n 1 -r
        echo
        case $REPLY in
            [Yy]* )
                log "üì° Configurando conex√£o com blockchain remota BRLN Club..."
                brln_credentials
                break
                ;;
            [Nn]* | "" )
                log "üè† Usando blockchain local (configura√ß√£o padr√£o)"
                info "A sincroniza√ß√£o da blockchain Bitcoin ser√° realizada localmente."
                warning "‚ö†Ô∏è  Isso pode levar v√°rias horas para sincronizar completamente."
                break
                ;;
            * )
                echo "Por favor, responda y (sim) ou n (n√£o)."
                ;;
        esac
    done
    echo ""
    read -p "Deseja exibir logs da instala√ß√£o? (y/n): " verbose_mode
    if [[ "$verbose_mode" == "y" ]]; then
        cd "$REPO_DIR/container"
        sudo docker-compose build $app
        sudo docker-compose up -d $app
    elif [[ "$verbose_mode" == "n" ]]; then
        warning " üïí Aguarde..."
        cd "$REPO_DIR/container"
        sudo docker-compose build $app >> /dev/null 2>&1 & spinner
        sudo docker-compose up -d $app >> /dev/null 2>&1 & spinner
        clear
    else
        error "Op√ß√£o inv√°lida."
        sudo bash "$REPO_DIR/brunel.sh"
    fi
}

configure_elements() {
    local user="$1"
    local pass="$2"
    local elements_conf="container/elements/elements.conf"
    
    log "üìù Configurando elements.conf..."
    
    # Verificar se o arquivo existe
    if [[ ! -f "$elements_conf" ]]; then
        # Copiar do exemplo se n√£o existir
        if [[ -f "container/elements/elements.conf.example" ]]; then
            cp "container/elements/elements.conf.example" "$elements_conf"
            log "Arquivo elements.conf criado a partir do exemplo"
        else
            error "Arquivo elements.conf.example n√£o encontrado!"
            return 1
        fi
    fi
    
    # Atualizar credenciais no elements.conf
    sed -i "s/mainchainrpcuser=<brln_rpc_user>/mainchainrpcuser=$user/g" "$elements_conf"
    sed -i "s/mainchainrpcpassword=<brln_rpc_pass>/mainchainrpcpassword=$pass/g" "$elements_conf"
    
    log "‚úÖ elements.conf configurado com sucesso!"
}

configure_lnd_conf() {
    local user="$1"
    local pass="$2"
    local lnd_conf="container/lnd/lnd.conf"
    
    log "üìù Configurando lnd.conf..."
    
    # Verificar se o arquivo existe
    if [[ ! -f "$lnd_conf" ]]; then
        # Copiar do exemplo remoto se n√£o existir
        if [[ -f "container/lnd/lnd.conf.example.remote" ]]; then
            cp "container/lnd/lnd.conf.example.remote" "$lnd_conf"
            log "Arquivo lnd.conf criado a partir do exemplo remoto"
        else
            error "Arquivo lnd.conf.example.remote n√£o encontrado!"
            return 1
        fi
    fi
    
    # Atualizar credenciais no lnd.conf
    sed -i "s/bitcoind.rpcuser=<brln_rpc_user>/bitcoind.rpcuser=$user/g" "$lnd_conf"
    sed -i "s/bitcoind.rpcpass=<brln_rpc_user>/bitcoind.rpcpass=$pass/g" "$lnd_conf"
    
    log "‚úÖ lnd.conf configurado com sucesso!"
}

# Fun√ß√£o para capturar seed do LND
capture_lnd_seed() {
    # Tentar capturar a seed do LND
    warning "‚ö†Ô∏è IMPORTANTE: PEGUE PAPEL E CANETA PARA ANOTAR A SUA FRASE DE 24 PALAVRAS SEED DO LND"
    warning "Extraindo seed LND dos logs..."
    
    # Tentar capturar a seed m√∫ltiplas vezes se necess√°rio
    MAX_ATTEMPTS=1
    attempt=1
    
    while [[ $attempt -le $MAX_ATTEMPTS ]]; do
        log "Tentativa $attempt de $MAX_ATTEMPTS para capturar seed do LND..."
        
        # Captura as linhas de in√≠cio e fim do seed, o aviso e as palavras numeradas do LND
        docker logs lnd 2>/dev/null | head -200 | \
            awk '
                /!!!YOU MUST WRITE DOWN THIS SEED TO BE ABLE TO RESTORE THE WALLET!!!/ {print; next}
                /-+BEGIN LND CIPHER SEED-+/ {in_seed=1; print; next}
                /-+END LND CIPHER SEED-+/ {print; in_seed=0; next}
                in_seed && /^[[:space:]]*[0-9]+\./ {print}
            ' > ../seeds.txt
    
        # Verificar se conseguiu capturar a seed
        if [[ -s ../seeds.txt ]]; then
            log "Seed do LND capturada com sucesso!"
            break
        else
            warning "N√£o foi poss√≠vel capturar a seed do LND na tentativa $attempt"
            if [[ $attempt -lt $MAX_ATTEMPTS ]]; then
                log "Aguardando 5 segundos antes da pr√≥xima tentativa..."
                sleep 5
            fi
        fi
        
        ((attempt++))
    done
}

# Fun√ß√£o para capturar senhas
capture_passwords() {
    echo "capturando as senhas do lndg e do thunderhub..."
    sleep 10 & spinner $!
    docker logs lndg 2>/dev/null | grep "FIRST TIME LOGIN PASSWORD" | awk -F': ' '{print $2}' > ../passwords.txt
    
    echo ""
    echo "Senha do LNDG: $(cat ../passwords.txt | grep -oP 'FIRST TIME LOGIN PASSWORD: \K.*')"
    echo ""
    
    echo ""
    warning "Anote agora as informa√ß√µes mostradas acima, caso voc√™ n√£o o fa√ßa, elas n√£o ser√£o exibidas novamente no futuro!"
}

# Fun√ß√£o para exibir e confirmar seed
display_and_confirm_seed() {
    # Exibir conte√∫do do arquivo de seeds se existir
    if [[ -f "../seeds.txt" && -s "../seeds.txt" ]]; then
        echo "=========================================="
        echo "üìú SEED PHRASE DE RECUPERA√á√ÉO:"
        echo "=========================================="
        echo ""
        warning "üö® ATEN√á√ÉO CR√çTICA: ANOTE ESTAS PALAVRAS AGORA!"
        warning "üîê Sem essas palavras voc√™ PERDER√Å ACESSO aos seus bitcoins!"
        warning "üìù Escreva as 24 palavras em PAPEL e guarde em local SEGURO!"
        echo ""
        cat ../seeds.txt
        echo ""
        echo "=========================================="
        echo ""
        
        while true; do
            read -p "Voc√™ j√° anotou a seed em local seguro? y/N: " -n 1 -r
            echo
            case $REPLY in
                [Yy]* ) 
                    log "‚úÖ Seed confirmada como anotada em local seguro"
                    echo ""
                    break
                    ;;
                [Nn]* ) 
                    echo ""
                    error "‚ùå PARE AGORA! N√£o continue sem anotar a seed!"
                    warning "üö® ANOTE AS 24 PALAVRAS ACIMA EM PAPEL ANTES DE CONTINUAR!"
                    echo ""
                    echo "Pressione qualquer tecla quando tiver anotado..."
                    read -n 1 -s
                    echo ""
                    ;;
                * ) 
                    echo "Por favor, responda y sim ou n n√£o."
                    ;;
            esac
        done
    else
        warning "‚ö†Ô∏è Nenhuma seed foi capturada no arquivo seeds.txt ap√≥s $MAX_ATTEMPTS tentativas"
        warning "   Poss√≠veis causas:"
        warning "   - Container LND ainda n√£o iniciou completamente"
        warning "   - LND j√° foi inicializado anteriormente"
        warning "   - Erro nos logs do container"
        echo ""
        info "üí° Para verificar manualmente:"
        echo "   docker logs lnd | grep -A 30 'CIPHER SEED'"
        echo ""
        read -p "Deseja continuar mesmo assim? y/N: " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            error "Opera√ß√£o cancelada pelo usu√°rio"
            exit 1
        fi
    fi
}

# Fun√ß√£o para autodestruction de arquivos
auto_destruction_menu() {
    # Perguntar sobre autodestrui√ß√£o
    warning "üî• OP√á√ÉO DE SEGURAN√áA: Autodestrui√ß√£o dos arquivos de senha"
    echo ""
    echo "Por seguran√ßa, voc√™ pode optar por:"
    echo "1. üìÅ Manter o arquivo salvo seeds.txt"
    echo "2. üî• Fazer autodestrui√ß√£o do arquivo"
    echo ""
    echo "‚ö†Ô∏è  ATEN√á√ÉO: Se escolher autodestrui√ß√£o, voc√™ j√° anotado frase de 24 palavras seed do LND ou voc√™ n√£o poder√° recuperar seus bitcoins!"
    echo ""
    
    while true; do
        read -p "Deseja fazer autodestrui√ß√£o dos arquivos de seeds? y/N: " -n 1 -r
        echo
        case $REPLY in
            [Yy]* ) 
                echo ""
                warning "üî• √öLTIMA CHANCE: Os arquivos ser√£o apagados em 10 segundos!"
                warning "üìã Certifique-se de que copiou todas as informa√ß√µes importantes!"
                echo ""
                echo "Arquivos que ser√£o apagados:"
                echo "  ‚Ä¢ seeds.txt"
                echo ""
                
                for i in {10..1}; do
                    echo -ne "\rIniciando autodestrui√ß√£o em: ${i}s - Ctrl+C para cancelar"
                    sleep 1
                done
                echo ""
                echo ""
                
                log "üî• Iniciando autodestrui√ß√£o dos arquivos de seed..."
                
                # Apagar arquivos
                if [[ -f "../seeds.txt" ]]; then
                    rm -f "../seeds.txt"
                    log "‚ùå seeds.txt apagado"
                fi
                
                echo ""
                warning "üî• Autodestrui√ß√£o conclu√≠da!"
                warning "üìã Certifique-se de que salvou todas as informa√ß√µes importantes!"
                echo ""
                break
                ;;
            [Nn]* ) 
                log "üìÅ Arquivos de senha mantidos:"
                echo "  ‚Ä¢ passwords.md"
                echo "  ‚Ä¢ passwords.txt"
                echo "  ‚Ä¢ seeds.txt"
                echo "  ‚Ä¢ startup.md"
                echo ""
                info "üí° Dica: Fa√ßa backup destes arquivos em local seguro!"
                break
                ;;
            * ) 
                echo "Por favor, responda y sim ou n n√£o."
                ;;
        esac
    done
}

# Fun√ß√£o principal
main() {
    capture_lnd_seed
    capture_passwords
    display_and_confirm_seed
    auto_destruction_menu
}

# Executar fun√ß√£o principal se o script for chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
