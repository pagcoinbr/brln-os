#!/bin/bash
SCRIPT_VERSION=v1.0-beta
TOR_LINIK=https://deb.torproject.org/torproject.org
TOR_GPGLINK=https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc
LND_VERSION=0.18.5
BTC_VERSION=28.1
VERSION_THUB=$(curl -s https://api.github.com/repos/apotdevin/thunderhub/releases/latest | jq -r '.tag_name' | sed 's/^v//')
REPO_DIR="/home/admin/brlnfullauto"
HTML_SRC="$REPO_DIR/html"
CGI_DST="/usr/lib/cgi-bin"
WWW_HTML="/var/www/html"
SERVICES_DIR="/home/admin/brlnfullauto/services"
POETRY_BIN="/home/admin/.local/bin/poetry"
FLASKVENV_DIR="/home/admin/envflask"
atual_user=$(whoami)
branch=main
git_user=pagcoinbr

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
MAGENTA='\033[1;35m'
CYAN='\033[1;36m'
NC='\033[0m' # Sem cor

update_and_upgrade() {
  app="Interface Gr√°fica"
  echo "Instalando Apache..."
  sudo -v
  sudo apt install apache2 -y >> /dev/null 2>&1 & spinner
  echo "Habilitando m√≥dulos do Apache..."
  sudo a2enmod cgid dir >> /dev/null 2>&1 & spinner
  echo "Reiniciando o servi√ßo Apache..."
  sudo systemctl restart apache2 >> /dev/null 2>&1 & spinner

  # Executa o git dentro do diret√≥rio, sem precisar dar cd
  git -C "$REPO_DIR" stash || true
  git -C "$REPO_DIR" pull origin "$branch"

  sudo rm -rf "$WWW_HTML"/*.html
  sudo rm -rf "$WWW_HTML/css"
  sudo rm -rf "$WWW_HTML/js"
  sudo rm -rf "$WWW_HTML/imagens"
  sudo rm -rf "$WWW_HTML/radio"
  sudo rm -rf "$CGI_DST"/*.sh

  echo "üì• Copiando novos arquivos da interface web..."

  # Copia os HTMLs principais
  sudo cp "$HTML_SRC"/*.html "$WWW_HTML/"

  # Copia pastas CSS, JS, Imagens
  sudo cp -r "$HTML_SRC/css" "$WWW_HTML/"
  sudo cp -r "$HTML_SRC/js" "$WWW_HTML/"
  sudo cp -r "$HTML_SRC/imagens" "$WWW_HTML/"
  sudo cp -r "$HTML_SRC/radio" "$WWW_HTML/"

  # Copia scripts CGI para /usr/lib/cgi-bin
  sudo cp "$HTML_SRC/cgi-bin/"*.sh "$CGI_DST/"

  # Corrigir permiss√µes de execu√ß√£o
  sudo chmod +x "$CGI_DST"/*.sh
  for script in "$CGI_DST"/*.sh; do
    sudo chmod +x "$script"
  done

  # Configurar o Apache para permitir CGI no diret√≥rio correto
  if ! grep -q 'Directory "/usr/lib/cgi-bin"' "/etc/apache2/sites-enabled/000-default.conf"; then
    echo "Adicionando bloco de configura√ß√£o CGI ao Apache..."
    sudo sed -i '/<\/VirtualHost>/i \
    <Directory "/usr/lib/cgi-bin">\n\
      AllowOverride None\n\
      Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch\n\
      Require all granted\n\
      AddHandler cgi-script .sh\n\
    </Directory>\n' "/etc/apache2/sites-enabled/000-default.conf"
  else
    echo "Bloco de configura√ß√£o CGI j√° existe no Apache."
  fi

  # Gerar sudoers din√¢mico com todos os scripts .sh do cgi-bin
  SCRIPT_LIST=$(sudo find "$CGI_DST" -maxdepth 1 -type f -name "*.sh" | sort | tr '\n' ',' | sed 's/,$//')

  if [ -n "$SCRIPT_LIST" ]; then
    sudo tee /etc/sudoers.d/www-data-scripts > /dev/null <<EOF
www-data ALL=(ALL) NOPASSWD: $SCRIPT_LIST
EOF
  fi
  # Abre a posta 80 no UFW
  if ! sudo ufw status | grep -q "80/tcp"; then
    sudo ufw allow from $subnet to any port 80 proto tcp comment 'allow Apache from local network'
  fi
  sudo usermod -aG admin www-data
  # Garante que o pacote python3-venv esteja instalado
  if ! dpkg -l | grep -q python3-venv; then
    sudo apt install python3-venv -y >> /dev/null 2>&1 & spinner
  else
    echo "‚úÖ python3-venv j√° est√° instalado."
  fi

  # Define o diret√≥rio do ambiente virtual
  FLASKVENV_DIR="/home/admin/envflask"

  # Cria o ambiente virtual apenas se ainda n√£o existir
  if [ ! -d "$FLASKVENV_DIR" ]; then
    python3 -m venv "$FLASKVENV_DIR" >> /dev/null 2>&1 & spinner
  else
    echo "‚úÖ Ambiente virtual j√° existe em $FLASKVENV_DIR."
  fi

  # Ativa o ambiente virtual
  echo "‚ö° Ativando ambiente virtual..."
  source "$FLASKVENV_DIR/bin/activate"

  # Instala Flask e Flask-CORS
  pip install flask flask-cors >> /dev/null 2>&1 & spinner

  # üõ°Ô∏è Caminho seguro para o novo arquivo dentro do sudoers.d
  SUDOERS_TMP="/etc/sudoers.d/admin-services"

  # üìù Cria√ß√£o segura do arquivo usando here-document
  sudo tee "$SUDOERS_TMP" > /dev/null <<EOF
admin ALL=(ALL) NOPASSWD: /usr/bin/systemctl start lnbits.service, /usr/bin/systemctl stop lnbits.service, /usr/bin/systemctl start thunderhub.service, /usr/bin/systemctl stop thunderhub.service, /usr/bin/systemctl start lnd.service, /usr/bin/systemctl stop lnd.service, /usr/bin/systemctl start lndg-controller.service, /usr/bin/systemctl stop lndg-controller.service, /usr/bin/systemctl start lndg.service, /usr/bin/systemctl stop lndg.service, /usr/bin/systemctl start simple-lnwallet.service, /usr/bin/systemctl stop simple-lnwallet.service, /usr/bin/systemctl start bitcoind.service, /usr/bin/systemctl stop bitcoind.service, /usr/bin/systemctl start bos-telegram.service, /usr/bin/systemctl stop bos-telegram.service, /usr/bin/systemctl start tor.service, /usr/bin/systemctl stop tor.service
EOF

  # ‚úÖ Valida se o novo arquivo sudoers √© v√°lido
  if sudo visudo -c -f "$SUDOERS_TMP"; then
    sleep 1
  else
    echo "‚õî Erro na valida√ß√£o! Arquivo inv√°lido, removendo."
    sudo rm -f "$SUDOERS_TMP"
    exit 1
  fi
  sudo systemctl restart apache2
  sudo apt install -y python3-flask >> /dev/null 2>&1 & spinner
}

gotty_do () {
  echo -e "${GREEN} Instalando Interface gr√°fica... ${NC}"
  LOCAL_APPS="/home/admin/brlnfullauto/local_apps"
  if [[ $arch == "x86_64" ]]; then
    sudo tar -xvzf "$LOCAL_APPS/gotty/gotty_2.0.0-alpha.3_linux_amd64.tar.gz" -C /home/admin >> /dev/null 2>&1
  else
    sudo tar -xvzf "$LOCAL_APPS/gotty/gotty_2.0.0-alpha.3_linux_arm.tar.gz" -C /home/admin >> /dev/null 2>&1
  fi
  # Move e torna execut√°vel
  sudo mv /home/admin/gotty /usr/local/bin/gotty
  sudo chmod +x /usr/local/bin/gotty
}

gotty_install () {
if [[ ! -f /usr/local/bin/gotty ]]; then
  gotty_do
else
  echo -e "${GREEN} Gotty j√° instalado, atualizando... ${NC}"
  sudo rm -f /usr/local/bin/gotty
  gotty_do
fi

# Define arrays for services and ports
SERVICES=("gotty" "gotty-fullauto" "gotty-logs-lnd" "gotty-logs-bitcoind" "gotty-btc-editor" "gotty-lnd-editor" "control-systemd")
PORTS=("3131" "3232" "3434" "3535" "3636" "3333" "5001")
COMMENTS=("allow BRLNfullauto on port 3131 from local network" 
  "allow cli on port 3232 from local network" 
  "allow bitcoinlogs on port 3434 from local network" 
  "allow lndlogs on port 3535 from local network"
  "allow btc-editor on port 3636 from local network"
  "allow lnd-editor on port 3333 from local network"
  "allow control-systemd on port 5001 from local network")

# Remove and copy service files
for service in "${SERVICES[@]}"; do
  sudo rm -f /etc/systemd/system/$service.service
  sudo cp /home/admin/brlnfullauto/services/$service.service /etc/systemd/system/$service.service
done

# Reload systemd and enable/start services
sudo systemctl daemon-reload
for service in "${SERVICES[@]}"; do
  if ! sudo systemctl is-enabled --quiet $service.service; then
    sudo systemctl enable $service.service >> /dev/null 2>&1
    sudo systemctl restart $service.service >> /dev/null 2>&1 & spinner
  fi
done

# Configure UFW rules for ports
for i in "${!PORTS[@]}"; do
  if ! sudo ufw status | grep -q "${PORTS[i]}/tcp"; then
    sudo ufw allow from $subnet to any port ${PORTS[i]} proto tcp comment "${COMMENTS[i]}" >> /dev/null 2>&1
  fi
done
}

gui_update() {
  update_and_upgrade
  gotty_install
  sudo chown -R admin:admin /var/www/html/radio
  sudo chmod +x /var/www/html/radio/radio-update.sh
  sudo chmod +x /home/admin/brlnfullauto/html/radio/radio-update.sh
  menu
}

terminal_web() {
  echo -e "${GREEN} Iniciando... ${NC}"
  if [[ ! -f /usr/local/bin/gotty ]]; then
    # Baixa o bin√°rio como admin
    update_and_upgrade
    radio_update
    gotty_install
    sudo chown -R admin:admin /var/www/html/radio
    sudo chmod +x /var/www/html/radio/radio-update.sh
    sudo chmod +x /home/admin/brlnfullauto/html/radio/radio-update.sh
    tailscale_vpn
    opening
    exit 0
  else
    if [[ $atual_user == "admin" ]]; then
      menu
      exit 0
    else
      echo -e "${RED} Voc√™ n√£o est√° logado como admin! ${NC}"
      echo -e "${RED} Logando como admin e executando o script... ${NC}"
      if [[ ! -f /usr/local/bin/gotty ]]; then
        update_and_upgrade
        gotty_install
      fi
      sudo -u admin bash "$INSTALL_DIR/brunel.sh"
      exit 0
    fi
  fi
}

create_main_dir() {
  sudo mkdir /data
  sudo chown admin:admin /data
}

configure_ufw() {
  sudo sed -i 's/^IPV6=yes/IPV6=no/' /etc/default/ufw
  sudo ufw logging off
  sudo ufw allow from $subnet to any port 22 proto tcp comment 'allow SSH from local network'
  sudo ufw --force enable
}

install_tor() {
  sudo apt install -y apt-transport-https
  echo "deb [arch=amd64 signed-by=/usr/share/keyrings/tor-archive-keyring.gpg] $TOR_LINIK jammy main
  deb-src [arch=amd64 signed-by=/usr/share/keyrings/tor-archive-keyring.gpg] $TOR_LINIK jammy main" | sudo tee /etc/apt/sources.list.d/tor.list
  sudo su -c "wget -qO- $TOR_GPGLINK | gpg --dearmor | tee /usr/share/keyrings/tor-archive-keyring.gpg"
  sudo apt update && sudo apt install -y tor deb.torproject.org-keyring
  sudo sed -i 's/^#ControlPort 9051/ControlPort 9051/' /etc/tor/torrc
  sudo systemctl reload tor
  if sudo ss -tulpn | grep -q "127.0.0.1:9050" && sudo ss -tulpn | grep -q "127.0.0.1:9051"; then
    echo "Tor est√° configurado corretamente e ouvindo nas portas 9050 e 9051."
    wget -q -O - https://repo.i2pd.xyz/.help/add_repo | sudo bash -s -
    sudo apt update && sudo apt install -y i2pd
    echo "i2pd instalado com sucesso."
  else
    echo "Erro: Tor n√£o est√° ouvindo nas portas corretas."
  fi
}

postgres_db () {
  cd "$(dirname "$0")" || cd ~

  echo -e "${GREEN}‚è≥ Iniciando instala√ß√£o do PostgreSQL...${NC}"

  # Importa a chave do reposit√≥rio oficial
  sudo install -d /usr/share/postgresql-common/pgdg
  sudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc

  # Adiciona o reposit√≥rio
  sudo sh -c 'echo "deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'

  # Atualiza os pacotes e instala o PostgreSQL
  sudo apt update && sudo apt install -y postgresql postgresql-contrib

  echo -e "${GREEN}‚úÖ PostgreSQL instalado com sucesso!${NC}"
  sleep 2

  # Cria o diret√≥rio de dados customizado
  sudo mkdir -p /data/postgresdb/17
  sudo chown -R postgres:postgres /data/postgresdb
  sudo chmod -R 700 /data/postgresdb

  echo -e "${GREEN}üìÅ Diret√≥rio /data/postgresdb/17 preparado.${NC}"
  sleep 1

  # Inicializa o cluster no novo local
  sudo -u postgres /usr/lib/postgresql/17/bin/initdb -D /data/postgresdb/17

  # Redireciona o PostgreSQL para o novo diret√≥rio
  sudo sed -i "42s|.*|data_directory = '/data/postgresdb/17'|" /etc/postgresql/17/main/postgresql.conf

  echo -e "${YELLOW}üîÅ Redirecionando data_directory para /data/postgresdb/17${NC}"

  # Reinicia servi√ßos e recarrega systemd
  sudo systemctl daemon-reexec
  sudo systemctl daemon-reload
  sudo systemctl restart postgresql

  # Mostra clusters ativos
  pg_lsclusters

  # Cria a role admin com senha padr√£o (admin)
  sudo -u postgres psql -c "CREATE ROLE admin WITH LOGIN CREATEDB PASSWORD 'admin';" || true

  # Cria banco de dados lndb com owner admin
  sudo -u postgres createdb -O admin lndb

  echo -e "${GREEN}üéâ PostgreSQL est√° pronto para uso com o banco 'lndb' e o usu√°rio 'admin'.${NC}"
}



download_lnd() {
  set -e
  mkdir -p ~/lnd-install
  cd ~/lnd-install
  if [[ $arch == "x86_64" ]]; then
    arch_lnd="amd64"
  else
    arch_lnd="arm64"
  fi
  wget https://github.com/lightningnetwork/lnd/releases/download/v$LND_VERSION-beta/lnd-linux-$arch_lnd-v$LND_VERSION-beta.tar.gz
  wget https://github.com/lightningnetwork/lnd/releases/download/v$LND_VERSION-beta/manifest-v$LND_VERSION-beta.txt.ots
  wget https://github.com/lightningnetwork/lnd/releases/download/v$LND_VERSION-beta/manifest-v$LND_VERSION-beta.txt
  wget https://github.com/lightningnetwork/lnd/releases/download/v$LND_VERSION-beta/manifest-roasbeef-v$LND_VERSION-beta.sig.ots
  wget https://github.com/lightningnetwork/lnd/releases/download/v$LND_VERSION-beta/manifest-roasbeef-v$LND_VERSION-beta.sig
  sha256sum --check manifest-v$LND_VERSION-beta.txt --ignore-missing
  curl https://raw.githubusercontent.com/lightningnetwork/lnd/master/scripts/keys/roasbeef.asc | gpg --import
  gpg --verify manifest-roasbeef-v$LND_VERSION-beta.sig manifest-v$LND_VERSION-beta.txt
  tar -xzf lnd-linux-$arch_lnd-v$LND_VERSION-beta.tar.gz
  sudo install -m 0755 -o root -g root -t /usr/local/bin lnd-linux-$arch_lnd-v$LND_VERSION-beta/lnd lnd-linux-$arch_lnd-v$LND_VERSION-beta/lncli
  sudo rm -r lnd-linux-$arch_lnd-v$LND_VERSION-beta lnd-linux-$arch_lnd-v$LND_VERSION-beta.tar.gz manifest-roasbeef-v$LND_VERSION-beta.sig manifest-roasbeef-v$LND_VERSION-beta.sig.ots manifest-v$LND_VERSION-beta.txt manifest-v$LND_VERSION-beta.txt.ots
}

configure_lnd() {
  local file_path="/home/admin/brlnfullauto/conf_files/lnd.conf"
  echo -e "${GREEN}################################################################${NC}"
  echo -e "${GREEN} A seguir voc√™ ser√° solicitado a adicionar suas credenciais do ${NC}"
  echo -e "${GREEN} bitcoind.rpcuser e bitcoind.rpcpass, caso voc√™ seja membro da BRLN.${NC}"
  echo -e "${YELLOW} Caso voc√™ n√£o seja membro, escolha a op√ß√£o ${RED}n√£o${NC} ${YELLOW}e prossiga.${NC}"
  echo -e "${GREEN}################################################################${NC}"  
  echo
  read -p "Voc√™ deseja utilizar o bitcoind da BRLN? (y/n): " use_brlnd
  if [[ $use_brlnd == "y" ]]; then
    echo -e "${GREEN} Voc√™ escolheu usar o bitcoind remoto da BRLN! ${NC}"
    read -p "Digite o bitcoind.rpcuser(BRLN): " bitcoind_rpcuser
    read -p "Digite o bitcoind.rpcpass(BRLN): " bitcoind_rpcpass
    sed -i "s|^bitcoind\.rpcuser=.*|bitcoind.rpcuser=${bitcoind_rpcuser}|" "$file_path"
    sed -i "s|^bitcoind\.rpcpass=.*|bitcoind.rpcpass=${bitcoind_rpcpass}|" "$file_path"
  elif [[ $use_brlnd == "n" ]]; then
    echo -e "${RED} Voc√™ escolheu n√£o usar o bitcoind remoto da BRLN! ${NC}"
    toggle_on
  else
    echo -e "${RED} Op√ß√£o inv√°lida. Por favor, escolha 'y' ou 'n'. ${NC}"
    exit 1
  fi
  # Coloca o alias l√° na linha 8 (essa parte pode manter igual)
  local alias_line="alias=$alias BR‚ö°Ô∏èLN"
  sudo sed -i "s|^alias=.*|$alias_line|" "$file_path"
  read -p "Qual Database voc√™ deseja usar? (postgres/bbolt): " db_choice
  if [[ $db_choice == "postgres" ]]; then
    echo -e "${GREEN}Voc√™ escolheu usar o Postgres!${NC}"
    read -p "Voc√™ deseja exibir os logs da instala√ß√£o? (y/n): " show_logs
    if [[ $show_logs == "y" ]]; then
      echo -e "${GREEN}Exibindo logs da instala√ß√£o do Postgres...${NC}"
      postgres_db
    elif [[ $show_logs == "n" ]]; then
      echo -e "${RED}Voc√™ escolheu n√£o exibir os logs da instala√ß√£o do Postgres!${NC}"
      postgres_db >> /dev/null 2>&1 & spinner
    else
      echo -e "${RED}Op√ß√£o inv√°lida. Por favor, escolha 'y' ou 'n'.${NC}"
      exit 1
    fi
    psql -V
    lnd_db=$(cat <<EOF
[db]
## Database selection
db.backend=postgres

[postgres]
db.postgres.dsn=postgresql://admin:admin@127.0.0.1:5432/lndb?sslmode=disable
db.postgres.timeout=0
EOF
)
  elif [[ $db_choice == "bbolt" ]]; then
    echo -e "${RED}Voc√™ escolheu usar o Bbolt!${NC}"
    lnd_db=$(cat <<EOF
[bolt]
## Database
# Set the next value to false to disable auto-compact DB
# and fast boot and comment the next line
db.bolt.auto-compact=true
# Uncomment to do DB compact at every LND reboot (default: 168h)
#db.bolt.auto-compact-min-age=0h
EOF
)
  else
    echo -e "${RED}Op√ß√£o inv√°lida. Por favor, escolha 'sqlite' ou 'bbolt'.${NC}"
    exit 1
  fi
  # Inserir a configura√ß√£o no arquivo lnd.conf na linha 100
  sed -i "/^routing\.strictgraphpruning=true/r /dev/stdin" "$file_path" <<< "

$lnd_db"

  sudo usermod -aG debian-tor admin
  sudo chmod 640 /run/tor/control.authcookie
  sudo chmod 750 /run/tor
  sudo usermod -a -G debian-tor admin
  sudo mkdir -p /data/lnd
  sudo chown -R admin:admin /data/lnd
  if [[ ! -L /home/admin/.lnd ]]; then
    ln -s /data/lnd /home/admin/.lnd
  fi
    sudo chmod -R g+X /data/lnd
    sudo chmod 640 /run/tor/control.authcookie
    sudo chmod 750 /run/tor
    sudo cp $SERVICES_DIR/lnd.service /etc/systemd/system/lnd.service
    sudo cp $file_path /data/lnd/lnd.conf
    sudo chown admin:admin /data/lnd/lnd.conf
    sudo chmod 640 /data/lnd/lnd.conf
  if [[ $use_brlnd == "y" ]]; then
    create_wallet
  else
    echo -e "${RED}Voc√™ escolheu n√£o usar o bitcoind remoto da BRLN!${NC}"
    echo -e "${YELLOW}Agora Voc√™ ir√° criar sua ${RED}FRASE DE 24 PALAVRAS.${YELLOW} Para isso voc√™ precisa aguardar seu bitcoin core sincronizar para prosseguir com a instala√ß√£o, este processo pode demorar de 3 a 7 dias, dependendo do seu hardware.${NC}"
    echo -e "${YELLOW}Para acompanhar a sincroniza√ß√£o do bitcoin core, use o comando ${RED} journalctl -fu bitcoind ${YELLOW}. Ao atingir 100%, voc√™ deve iniciar este programa novamente e escolher a op√ß√£o ${RED}2 ${YELLOW}mais uma vez. ${NC}"
    echo -e "${YELLOW}Apenas ap√≥s o termino deste processo, voc√™ pode prosseguir com a instala√ß√£o do lnd, caso contr√°rio voc√™ receber√° um erro na cria√ß√£o da carteira.${NC}"
    read -p "Seu bitcoin core j√° est√° completamente sincronizado? (y/n): " sync_choice
      if [[ $sync_choice == "y" ]]; then
        echo -e "${GREEN} Voc√™ escolheu que o bitcoin core j√° est√° sincronizado! ${NC}"
        toggle_on >> /dev/null 2>&1
        sleep 5
        create_wallet
      fi
  fi
}

24_word_confirmation () {
  echo -e "${YELLOW} Voc√™ confirma que anotou a sua frase de 24 palavras corretamente? Ela n√£o poder√° ser recuperada no futuro, se n√£o anotada agora!!! ${NC}"
  echo -e "${RED}Se voce n√£o guardar esta informa√ß√£o de forma segura, voc√™ pode perder seus fundos depositados neste node, permanentemente!!!${NC}"
  read -p "Voc√™ confirma que anotou a sua frase de 24 palavras corretamente? (y/n): " confirm_phrase
  if [[ $confirm_phrase == "y" ]]; then
    echo -e "${GREEN} Voc√™ confirmou que anotou a frase de 24 palavras! ${NC}"
  else
    echo -e "${RED} Op√ß√£o inv√°lida. Por favor, confirme se anotou a frase de seguran√ßa. ${NC}"
    24_word_confirmation
  fi
  unset password  # limpa da mem√≥ria, por seguran√ßa
  menu
} 

create_wallet () {
  if [[ ! -L /home/admin/.lnd ]]; then
    ln -s /data/lnd /home/admin/.lnd
  fi
  sudo chmod -R g+X /data/lnd
  sudo chmod 640 /run/tor/control.authcookie
  sudo chmod 750 /run/tor
  echo -e "${YELLOW}############################################################################################### ${NC}"
  echo -e "${YELLOW}Agora Voc√™ ir√° criar sua ${RED}FRASE DE 24 PALAVRAS${YELLOW}, digite a senha de desbloqueio do lnd, depois repita mais 2x para registra-la no lnd e pressione 'n' para criar uma nova carteira. ${NC}" 
  echo -e "${YELLOW}apenas pressione ${RED}ENTER${YELLOW} quando questionado se quer adicionar uma senha a sua frase de 24 palavras.${NC}" 
  echo -e "${YELLOW}AVISO!: Anote sua frase de 24 palavras com ATEN√á√ÉO, AGORA! ${RED}Esta frase n√£o pode ser recuperada no futuro se n√£o for anotada agora. ${NC}" 
  echo -e "${RED}Se voce n√£o guardar esta informa√ß√£o de forma segura, voc√™ pode perder seus fundos depositados neste node, permanentemente!!!${NC}"
  echo -e "${YELLOW}############################################################################################### ${NC}"
  read -p "Digite a senha da sua carteira lighting: " password
  read -p "Confirme a senha da sua carteira lighting: " password2
  if [[ $password != $password2 ]]; then
    echo -e "${RED}As senhas n√£o coincidem. Por favor, tente novamente.${NC}"
    create_wallet
  fi
  echo "$password" | sudo tee /data/lnd/password.txt > /dev/null
  sudo chown admin:admin /data/lnd/password.txt
  sudo chmod 600 /data/lnd/password.txt
  sudo chown admin:admin /data/lnd
  sudo chmod 740 /data/lnd/lnd.conf
  sudo systemctl daemon-reload
  sudo systemctl enable lnd >> /dev/null 2>&1
  sudo systemctl start lnd
  lncli --tlscertpath /data/lnd/tls.cert.tmp create
  24_word_confirmation
}

install_bitcoind() {
  local file_path="/home/admin/brlnfullauto/conf_files/bitcoin.conf"
  set -e
  if [[ $arch == "x86_64" ]]; then
    arch_btc="x86_64"
  else
    arch_btc="aarch64"
  fi

  cd /tmp
  wget https://bitcoincore.org/bin/bitcoin-core-$BTC_VERSION/bitcoin-$BTC_VERSION-$arch_btc-linux-gnu.tar.gz
  wget https://bitcoincore.org/bin/bitcoin-core-$BTC_VERSION/SHA256SUMS
  wget https://bitcoincore.org/bin/bitcoin-core-$BTC_VERSION/SHA256SUMS.asc
  sha256sum --ignore-missing --check SHA256SUMS
  curl -s "https://api.github.com/repositories/355107265/contents/builder-keys" | grep download_url | grep -oE "https://[a-zA-Z0-9./-]+" | while read url; do
    curl -s "$url" | gpg --import
  done
  gpg --verify SHA256SUMS.asc
  tar -xzvf bitcoin-$BTC_VERSION-$arch_btc-linux-gnu.tar.gz
  sudo install -m 0755 -o root -g root -t /usr/local/bin bitcoin-$BTC_VERSION/bin/bitcoin-cli bitcoin-$BTC_VERSION/bin/bitcoind
  sudo mkdir -p /data/bitcoin
  sudo chown admin:admin /data/bitcoin
  ln -s /data/bitcoin /home/admin/.bitcoin
  sudo cp $file_path /data/bitcoin/bitcoin.conf
  sudo chown admin:admin /data/bitcoin/bitcoin.conf
  sudo chmod 640 /data/bitcoin/bitcoin.conf
  cd /home/admin/.bitcoin
  wget https://raw.githubusercontent.com/bitcoin/bitcoin/master/share/rpcauth/rpcauth.py
  sudo sed -i "54s|.*|$(python3 rpcauth.py minibolt $rpcpsswd > /home/admin/.bitcoin/rpc.auth | grep '^rpcauth=')|" /home/admin/brlnfullauto/conf_files/bitcoin.conf
  sudo cp $SERVICES_DIR/bitcoind.service /etc/systemd/system/bitcoind.service
  sudo systemctl enable bitcoind
  sudo systemctl start bitcoind
  sudo ss -tulpn | grep bitcoind
  echo "Bitcoind instalado com sucesso!"
}

install_nodejs() {
  if [[ -d ~/.npm-global ]]; then
    echo "Node.js j√° est√° instalado."
  else
    curl -sL https://deb.nodesource.com/setup_21.x | sudo -E bash -
    sudo apt-get install nodejs -y
  fi
}

install_bos() {
  if [[ -d ~/.npm-global ]]; then
    echo "Balance of Satoshis j√° est√° instalado."
  else
    mkdir -p ~/.npm-global
    npm config set prefix ~/.npm-global
    if ! grep -q 'PATH="$HOME/.npm-global/bin:$PATH"' ~/.profile; then
      echo 'PATH="$HOME/.npm-global/bin:$PATH"' >> ~/.profile
    fi
  cd ~
  npm i -g balanceofsatoshis
  sudo bash -c 'echo "127.0.0.1" >> /etc/hosts'
  sudo chown -R admin:admin /data/lnd
  sudo chmod -R 755 /data/lnd
  export BOS_DEFAULT_LND_PATH=/data/lnd
  mkdir -p ~/.bos/$alias
  base64 -w0 /data/lnd/tls.cert > /data/lnd/tls.cert.base64
  base64 -w0 /data/lnd/data/chain/bitcoin/mainnet/admin.macaroon > /data/lnd/data/chain/bitcoin/mainnet/admin.macaroon.base64
  cert_base64=$(cat /data/lnd/tls.cert.base64)
  macaroon_base64=$(cat /data/lnd/data/chain/bitcoin/mainnet/admin.macaroon.base64)
  bash -c "cat <<EOF > ~/.bos/$alias/credentials.json
{
  "cert": "$cert_base64",
  "macaroon": "$macaroon_base64",
  "socket": "localhost:10009"
}
EOF"
  sudo cp $SERVICES_DIR/bos-telegram.service /etc/systemd/system/bos-telegram.service
  sudo systemctl daemon-reload
  fi
}

install_thunderhub() {
  if [[ -d ~/thunderhub ]]; then
    echo "ThunderHub j√° est√° instalado."
  else
  node -v
  npm -v
  sudo apt update && sudo apt full-upgrade -y
  cd
  curl https://github.com/apotdevin.gpg | gpg --import
  git clone --branch v$VERSION_THUB https://github.com/apotdevin/thunderhub.git && cd thunderhub
  git verify-commit v$VERSION_THUB
  npm install
  npm run build
  sudo ufw allow from $subnet to any port 3000 proto tcp comment 'allow ThunderHub SSL from local network'
  cp /home/admin/thunderhub/.env /home/admin/thunderhub/.env.local
  sed -i '51s|.*|ACCOUNT_CONFIG_PATH="/home/admin/thunderhub/thubConfig.yaml"|' /home/admin/thunderhub/.env.local
  bash -c "cat <<EOF > thubConfig.yaml
masterPassword: '$thub_senha'
accounts:
  - name: 'BRLNBolt'
    serverUrl: '127.0.0.1:10009'
    macaroonPath: '/data/lnd/data/chain/bitcoin/mainnet/admin.macaroon'
    certificatePath: '/data/lnd/tls.cert'
    password: '$thub_senha'
EOF"
  sudo cp $SERVICES_DIR/thunderhub.service /etc/systemd/system/thunderhub.service
  sudo systemctl start thunderhub.service
  sudo systemctl enable thunderhub.service
  fi
}

install_lndg () {
  if [[ -d /home/admin/lndg ]]; then
    echo "LNDG j√° est√° instalado."
  else
  sudo apt install -y python3-pip python3-venv
  sudo ufw allow from $subnet to any port 8889 proto tcp comment 'allow lndg from local network'
  cd
  git clone https://github.com/cryptosharks131/lndg.git
  cd lndg
  sudo apt install -y virtualenv
  virtualenv -p python3 .venv
  .venv/bin/pip install -r requirements.txt
  .venv/bin/pip install whitenoise
  .venv/bin/python3 initialize.py --whitenoise
  sudo cp $SERVICES_DIR/lndg.service /etc/systemd/system/lndg.service
  sudo cp $SERVICES_DIR/lndg-controller.service /etc/systemd/system/lndg-controller.service
  sudo systemctl daemon-reload
  sudo systemctl enable lndg-controller.service
  sudo systemctl start lndg-controller.service
  sudo systemctl enable lndg.service
  sudo systemctl start lndg.service
  fi
}

lnbits_install() {
  # Atualiza e instala depend√™ncias b√°sicas
  sudo apt install -y pkg-config libsecp256k1-dev libffi-dev build-essential python3-dev git curl

  # Instala Poetry (n√£o precisa ativar venv manual)
  curl -sSL https://install.python-poetry.org | python3 -
  echo 'export PATH="$HOME/.local/bin:$PATH"' >> "/home/admin/.bashrc"
  export PATH="$HOME/.local/bin:$PATH"

  # Verifica vers√£o do Poetry
  "$POETRY_BIN" self update || true
  "$POETRY_BIN" --version

  # Clona o reposit√≥rio LNbits
  git clone https://github.com/lnbits/lnbits.git "/home/admin/lnbits"
  sudo chown -R admin:admin "/home/admin/lnbits"

  # Entra no diret√≥rio e instala depend√™ncias com Poetry
  cd "/home/admin/lnbits"
  git checkout  v0.12.12
  "$POETRY_BIN" install

  # Copia o arquivo .env e ajusta a vari√°vel LNBITS_ADMIN_UI
  cp .env.example .env
  sed -i 's/LNBITS_ADMIN_UI=.*/LNBITS_ADMIN_UI=true/' .env

  # Configura√ß√µes do lnbits no ufw
  sudo ufw allow from $subnet to any port 5000 proto tcp comment 'allow LNbits from local network'

  # Configura systemd
  sudo cp $SERVICES_DIR/lnbits.service /etc/systemd/system/lnbits.service

  # Ativa e inicia o servi√ßo
  sudo systemctl daemon-reload
  sudo systemctl enable lnbits.service
  sudo systemctl start lnbits.service

  echo "‚úÖ LNbits instalado e rodando como servi√ßo systemd!"
  sudo rm -rf /home/admin/lnd-install
}

tailscale_vpn() {
  echo -e "${CYAN}üåê Instalando Tailscale VPN...${NC}"
  curl -fsSL https://tailscale.com/install.sh | sh > /dev/null 2>&1
  sudo apt install qrencode -y > /dev/null 2>&1

  LOGFILE="/tmp/tailscale_up.log"
  QRFILE="/tmp/tailscale_qr.log"

  sudo rm -f "$LOGFILE" "$QRFILE"
  sudo touch "$LOGFILE"
  sudo chmod 666 "$LOGFILE"

  echo -e "${BLUE}‚ñ∂Ô∏è Executando 'tailscale up'...${NC}"
  (sudo tailscale up > "$LOGFILE" 2>&1) &

  echo -e "${YELLOW}‚è≥ Aguardando link de autentica√ß√£o do Tailscale (sem timeout)...${NC}"
  echo -e "${YELLOW} Caso esta etapa n√£o progrida em 5 minutos, pressione Ctrl+C e fa√ßa ${RED}"tailscale up"${NC}"

  while true; do
    url=$(grep -Eo 'https://login\.tailscale\.com/[a-zA-Z0-9/]+' "$LOGFILE" | head -n1)
    if [[ -n "$url" ]]; then
      echo -e "${GREEN}‚úÖ Link encontrado: $url${NC}"
      echo "$url" | qrencode -t ANSIUTF8 | tee "$QRFILE"
      echo -e "${GREEN}üîó QR Code salvo em: $QRFILE${NC}"
      break
    fi
    sleep 1
  done
  opening
}

opening () {
  clear
  echo
  echo -e "${GREEN}‚úÖ Interface gr√°fica instalada com sucesso! üéâ${NC}"
  echo -e "${GREEN}‚ö°Ô∏è Pronto! Seu node est√° no ar, seguro e soberano... ou quase. üòè${NC}"
  echo -e "${GREEN}ü§® Mas me diz... ainda vai confiar seus sats na m√£o dos outros?${NC}"
  echo -e "${GREEN}üöÄ Rodar o pr√≥prio node √© s√≥ o primeiro passo rumo √† liberdade financeira.${NC}"
  echo -e "${GREEN}üåê Junte-se aos que realmente entendem soberania: üëâ${BLUE} https://br-ln.com${NC}"
  echo -e "${GREEN}üî• Na BR‚ö°LN a gente n√£o confia... a gente verifica, roda, automatiza e ensina!${NC}"
  echo -e "${GREEN} Acesse seu ${YELLOW}Node Lightning${NC}${GREEN} pelo navegador em:${NC}"
  echo
  echo -e "${RED} http://$(hostname -I | awk '{print $1}') ${NC}"
  echo
  echo -e "${RED} Ou escaneie o QR Code abaixo para conectar sua tailnet: ${NC}"
  echo
  echo -e "${GREEN}‚úÖ Link encontrado: ${RED} $url${NC}"
  echo "$url" | qrencode -t ANSIUTF8
  echo
  echo -e "${GREEN} Em seguida escolha ${YELLOW}\"Configura√ß√µes\"${NC}${GREEN} e depois ${YELLOW}\"Iniciar BrlnFullAuto\" ${NC}"
  echo
  echo
}

toggle_bitcoin () {
    # Exibir o menu para o usu√°rio
    while true; do
        echo "Escolha uma op√ß√£o:"
        echo "1) Trocar para o Bitcoin Core local"
        echo "2) Trocar para o node Bitcoin remoto"
        echo "3) Sair"
        read -p "Digite sua escolha: " choice

        case $choice in
            1)
                echo "Trocando para o Bitcoin Core local..."
                toggle_on
                wait
                echo "Trocado para o Bitcoin Core local."
                ;;
            2)
                echo "Trocando para o node Bitcoin remoto..."
                toggle_off
                wait 
                echo "Trocado para o node Bitcoin remoto."
                ;;
            3)
                echo "Saindo."
                menu
                ;;
            *)
                echo "Escolha inv√°lida. Por favor, tente novamente."
                ;;
        esac
        echo ""
    done
}

toggle_on () {
  local FILES_TO_DELETE=(
    "/home/admin/.lnd/tls.cert"
    "/home/admin/.lnd/tls.key"
    "/home/admin/.lnd/v3_onion_private_key"
  )

  # Fun√ß√£o interna para comentar linhas
  sed -i 's|^[[:space:]]*\(\[Bitcoind\]\)|#\1|' /data/lnd/lnd.conf
  sed -i 's|^[[:space:]]*\(bitcoind\.[^=]*=.*\)|#\1|' /data/lnd/lnd.conf
  # Fun√ß√£o interna para apagar os arquivos
    for file in "${FILES_TO_DELETE[@]}"; do
      if [ -f "$file" ]; then
        rm -f "$file" >> /dev/null 2>&1
        echo "Deleted: $file"
      else
        echo "File not found: $file" >> /dev/null 2>&1
      fi
    done
  # Fun√ß√£o interna para reiniciar o servi√ßo LND
    sudo systemctl restart lnd
    if [ $? -eq 0 ]; then
      echo "LND service restarted successfully."
    else
      echo "Failed to restart LND service."
    fi
}

toggle_off () {
  local FILES_TO_DELETE=(
    "/home/admin/.lnd/tls.cert"
    "/home/admin/.lnd/tls.key"
    "/home/admin/.lnd/v3_onion_private_key"
  )

  # Fun√ß√£o interna para descomentar linhas
  sed -i 's|^[[:space:]]*#\([[:space:]]*\[Bitcoind\]\)|\1|' /data/lnd/lnd.conf
  sed -i 's|^[[:space:]]*#\([[:space:]]*bitcoind\.[^=]*=.*\)|\1|' /data/lnd/lnd.conf
  # Fun√ß√£o interna para apagar os arquivos
    for file in "${FILES_TO_DELETE[@]}"; do
      if [ -f "$file" ]; then
        rm -f "$file"
        echo "Deleted: $file"
      else
        echo "File not found: $file"
      fi
    done

  # Fun√ß√£o interna para reiniciar o servi√ßo LND
    sudo systemctl restart lnd
    if [ $? -eq 0 ]; then
      echo "LND service restarted successfully."
    else
      echo "Failed to restart LND service."
    fi
}

lnd_update () {
  cd /tmp
LND_VERSION=$(curl -s https://api.github.com/repos/lightningnetwork/lnd/releases/latest | grep -oP '"tag_name": "\Kv[0-9]+\.[0-9]+\.[0-9]+(?=-beta)')
echo "$LND_VERSION"
{
    wget -q https://github.com/lightningnetwork/lnd/releases/download/$LND_VERSION-beta/lnd-linux-amd64-$LND_VERSION-beta.tar.gz
    wget -q https://github.com/lightningnetwork/lnd/releases/download/$LND_VERSION-beta/manifest-$LND_VERSION-beta.txt.ots
    wget -q https://github.com/lightningnetwork/lnd/releases/download/$LND_VERSION-beta/manifest-$LND_VERSION-beta.txt
    wget -q https://github.com/lightningnetwork/lnd/releases/download/$LND_VERSION-beta/manifest-roasbeef-$LND_VERSION-beta.sig.ots
    wget -q https://github.com/lightningnetwork/lnd/releases/download/$LND_VERSION-beta/manifest-roasbeef-$LND_VERSION-beta.sig
    sha256sum --check manifest-$LND_VERSION-beta.txt --ignore-missing
    curl -s https://raw.githubusercontent.com/lightningnetwork/lnd/master/scripts/keys/roasbeef.asc | gpg --import
    gpg --verify manifest-roasbeef-$LND_VERSION-beta.sig manifest-$LND_VERSION-beta.txt
    tar -xzf lnd-linux-amd64-$LND_VERSION-beta.tar.gz
    sudo install -m 0755 -o root -g root -t /usr/local/bin lnd-linux-amd64-$LND_VERSION-beta/lnd lnd-linux-amd64-$LND_VERSION-beta/lncli
    sudo rm -r lnd-linux-amd64-$LND_VERSION-beta lnd-linux-amd64-$LND_VERSION-beta.tar.gz manifest-roasbeef-$LND_VERSION-beta.sig manifest-roasbeef-v$LND_VERSION-beta.sig.ots manifest-v$LND_VERSION-beta.txt manifest-v$LND_VERSION-beta.txt.ots
    sudo systemctl restart lnd
    cd
} &> /dev/null &
  echo "Atualizando LND... Por favor, aguarde."
  wait
  echo "LND atualizado!"
}

bitcoin_update () {
  cd /tmp
VERSION=$(curl -s https://bitcoincore.org/en/download/ | grep -oP 'bitcoin-core-\K[0-9]+\.[0-9]+' | head -n1)
echo "$VERSION"
{
  wget https://bitcoincore.org/bin/bitcoin-core-$VERSION/bitcoin-$VERSION-x86_64-linux-gnu.tar.gz
  wget https://bitcoincore.org/bin/bitcoin-core-$VERSION/SHA256SUMS
  wget https://bitcoincore.org/bin/bitcoin-core-$VERSION/SHA256SUMS.asc
  sha256sum --ignore-missing --check SHA256SUMS
  curl -s "https://api.github.com/repositories/355107265/contents/builder-keys" | grep download_url | grep -oE "https://[a-zA-Z0-9./-]+" | while read url; do curl -s "$url" | gpg --import; done
  gpg --verify SHA256SUMS.asc
  tar -xvf bitcoin-$VERSION-x86_64-linux-gnu.tar.gz
  sudo install -m 0755 -o root -g root -t /usr/local/bin bitcoin-$VERSION/bin/bitcoin-cli bitcoin-$VERSION/bin/bitcoind
  bitcoind --version
  sudo rm -r bitcoin-$VERSION bitcoin-$VERSION-x86_64-linux-gnu.tar.gz SHA256SUMS SHA256SUMS.asc
    sudo systemctl restart bitcoind
    cd
} &> /dev/null &
  echo "Atualizando Bitcon Core... Por favor, aguarde."
  wait
  echo "Bitcoin Core atualizado!"
}

thunderhub_update () {
  echo "üîç Buscando a vers√£o mais recente do Thunderhub..."
  LATEST_VERSION=$(curl -s https://api.github.com/repos/apotdevin/thunderhub/releases/latest | grep tag_name | cut -d '"' -f 4)
  if [ -z "$LATEST_VERSION" ]; then
    echo "‚ùå N√£o foi poss√≠vel obter a √∫ltima vers√£o. Abortando..."
    return 1
  fi
  echo "üì¶ √öltima vers√£o encontrada: $LATEST_VERSION"
  read -p "Deseja continuar com a atualiza√ß√£o para a vers√£o $LATEST_VERSION? (y/n): " CONFIRMA
  if [[ "$CONFIRMA" != "n" ]]; then
    echo "‚ùå Atualiza√ß√£o cancelada."
    return 1
  fi
  echo "‚è≥ Atualizando Thunderhub para a vers√£o $LATEST_VERSION..."
  sudo systemctl stop thunderhub
  cd ~/thunderhub || { echo "‚ùå Diret√≥rio ~/thunderhub n√£o encontrado!"; return 1; }
  git fetch --all
  git checkout tags/"$LATEST_VERSION" -b update-"$LATEST_VERSION"
  npm install
  npm run build
  sudo systemctl start thunderhub
  echo "‚úÖ Thunderhub atualizado para a vers√£o $LATEST_VERSION!"
  head -n 3 package.json | grep version
}

lndg_update () {
  echo "üîç Iniciando atualiza√ß√£o do LNDg..."
  cd /home/admin/lndg || { echo "‚ùå Diret√≥rio /home/admin/lndg n√£o encontrado!"; return 1; }
  echo "üõë Parando servi√ßos do LNDg..."
  sudo systemctl stop lndg.service
  sudo systemctl stop lndg-controller.service
  echo "üíæ Salvando altera√ß√µes locais (git stash)..."
  git stash
  echo "üîÑ Atualizando reposit√≥rio via git pull..."
  git pull origin master
  echo "‚öôÔ∏è Aplicando migra√ß√µes..."
  .venv/bin/python manage.py migrate
  echo "üîÑ Recarregando systemd e iniciando servi√ßos..."
  sudo systemctl daemon-reload
  sudo systemctl start lndg.service
  sudo systemctl start lndg-controller.service
  echo "‚úÖ LNDg atualizado com sucesso!"
  git log -1 --pretty=format:"üìù √öltimo commit: %h - %s (%cd)" --date=short
}


lnbits_update () {
  echo "üîç Iniciando atualiza√ß√£o do LNbits..."
  cd /home/admin/lnbits || { echo "‚ùå Diret√≥rio /home/admin/lnbits n√£o encontrado!"; return 1; }
  echo "üõë Parando servi√ßo do LNbits..."
  sudo systemctl stop lnbits
  echo "üíæ Salvando altera√ß√µes locais (git stash)..."
  git stash
  echo "üîÑ Atualizando reposit√≥rio LNbits..."
  git pull origin main
  echo "üì¶ Atualizando Poetry e depend√™ncias..."
  poetry self update
  poetry install --only main
  echo "üîÑ Recarregando systemd e iniciando servi√ßo..."
  sudo systemctl daemon-reload
  sudo systemctl start lnbits
  echo "‚úÖ LNbits atualizado com sucesso!"
  git log -1 --pretty=format:"üìù √öltimo commit: %h - %s (%cd)" --date=short
}


thunderhub_uninstall () {
  sudo systemctl stop thunderhub
  sudo systemctl disable thunderhub
  sudo rm -rf /home/admin/thunderhub
  sudo rm -rf /etc/systemd/system/thunderhub.service
  sudo rm -rf /etc/nginx/sites-available/thunderhub-reverse-proxy.conf
  echo "Thunderhub desinstalado!"
}

lndg_unninstall () {
  sudo systemctl stop lndg.service
  sudo systemctl disable lndg.service
  sudo systemctl stop lndg-controller.service
  sudo systemctl disable lndg-controller.service
  sudo rm -rf /home/admin/lndg
  sudo rm -rf /etc/systemd/system/lndg.service
  sudo rm -rf /etc/systemd/system/lndg-controller.service
  sudo rm -rf /etc/nginx/sites-available/lndg-reverse-proxy.conf
  echo "LNDg desinstalado!"
}

lnbits_unninstall () {
  sudo systemctl stop lnbits
  sudo systemctl disable lnbits
  sudo rm -rf /home/admin/lnbits
  sudo rm -rf /etc/systemd/system/lnbits.service
  sudo rm -rf /etc/nginx/sites-available/lnbits-reverse-proxy.conf
  echo "LNbits desinstalado!"
}

pacotes_do_sistema () {
  sudo apt update && sudo apt upgrade -y
  sudo systemctl reload tor
  echo "Os pacotes do sistema foram atualizados! Ex: Tor + i2pd + PostgreSQL"
}

menu_manutencao() {
  echo "Escolha uma op√ß√£o:"
  echo "1) Atualizar o LND"
  echo "2) Atualizar o Bitcoind ATEN√á√ÉO"
  echo "Antes de atualizar o Bitcoind, leia as notas de atualiza√ß√£o"
  echo "3) Atualizar o Thunderhub"
  echo "4) Atualizar o LNDg"
  echo "5) Atualizar o LNbits"
  echo "6) Atualizar os pacotes do sistema"
  echo "7) Desinstalar Thunderhub"
  echo "8) Desinstalar LNDg"
  echo "9) Desinstalar LNbits"
  echo "0) Sair"
  read -p "Op√ß√£o: " option

  case $option in
    1)
      lnd_update
      ;;
    2)
      bitcoin_update
      ;;
    3)
      thunderhub_update
      ;;
    4)
      lndg_update
      ;;
    5)
      lnbits_update
      ;;
    6)
      pacotes_do_sistema
      ;;
    7)
      thunderhub_uninstall
      ;;
    8)
      lndg_unninstall
      ;;
    9)
      lnbits_unninstall
      ;;
    0)
      echo "Saindo..."
      exit 0
      ;;
    *)
      echo "Op√ß√£o inv√°lida!"
      ;;
  esac
}

manutencao_script () {
  # Executa o script de manuten√ß√£o
  lnd --version
  bitcoin-cli --version
  menu_manutencao
}	

get_simple_wallet () {
  cd ~
  arch=$(uname -m)
  if [[ $arch == "x86_64" ]]; then
    echo "Arquitetura x86_64 detectada."
    simple_arch="simple-lnwallet"
  else
    echo "Arquitetura ARM64 detectada."
    simple_arch="simple-lnwallet-rpi"
  fi
  if [[ -f /home/admin/$simple_arch ]]; then
    rm -rf /home/admin/$simple_arch
  fi
  cp /home/admin/brlnfullauto/local_apps/simple-lnwallet/$simple_arch /home/admin/
  if [[ -f /home/admin/simple-lnwallet-rpi ]]; then
  mv /home/admin/$simple_arch /home/admin/simple-lnwallet
  fi
  chmod +x /home/admin/$simple_arch
  sudo apt install xxd -y
}

simple_lnwallet () {
  get_simple_wallet
  sudo rm -f /etc/systemd/system/simple-lnwallet.service
  sudo cp ~/brlnfullauto/services/simple-lnwallet.service /etc/systemd/system/simple-lnwallet.service
  sleep 1
  sudo systemctl daemon-reload
  sleep 1
  sudo systemctl enable simple-lnwallet
  sudo systemctl start simple-lnwallet
  sudo ufw allow from $subnet to any port 35671 proto tcp comment 'allow Simple LNWallet from local network'
  echo
  echo -e "${YELLOW}üìù Copie o conte√∫do do arquivo macaroon.hex e cole no campo macaroon:${NC}"
  xxd -p ~/.lnd/data/chain/bitcoin/mainnet/admin.macaroon | tr -d '\n' > ~/brlnfullauto/macaroon.hex
  cat ~/brlnfullauto/macaroon.hex
  echo
  echo
  echo
  echo -e "${YELLOW}üìù Copie o conte√∫do do arquivo tls.hex e cole no campo tls:${NC}" 
  xxd -p ~/.lnd/tls.cert | tr -d '\n' | tee ~/brlnfullauto/tls.hex
  cat ~/brlnfullauto/tls.hex
  echo
  echo
}

config_bos_telegram () {
  # ‚ö° Script para configurar o BOS Telegram no systemd
  # üîê Substitui o placeholder pelo Connection Code fornecido
  # üõ†Ô∏è Reinicia o servi√ßo ap√≥s modifica√ß√£o

  SERVICE_FILE="/etc/systemd/system/bos-telegram.service"
  BOT_LINK="https://t.me/BotFather"

  echo "üîó Gerando QR Code para acessar o bot do Telegram..."
  qrencode -t ansiutf8 "$BOT_LINK"

  echo ""
  echo "üì± Aponte sua c√¢mera para o QR Code acima para abrir: $BOT_LINK"
  echo ""

  echo "‚ö°Ô∏è Crie um bot no Telegram usando o BotFather e obtenha a API Key."
  echo "üåê Agora acesse a interface web, v√° em \"Configura√ß√µes\" e clique em \" Autenticar Bos Telegram\"."

  # Aguarda o usu√°rio confirmar que recebeu a conex√£o
  read -p "Pressione ENTER aqui ap√≥s a conex√£o ser conclu√≠da no Telegram..."

  echo "‚úçÔ∏è Digite o Connection Code do seu bot Telegram:"
  read -r connection_code

  # üß† Valida√ß√£o simples
  if [[ -z "$connection_code" ]]; then
    echo "‚ùå Connection Code n√£o pode estar vazio."
    exit 1
  fi

  # üìù Adiciona ou substitui ExecStart com o Connection Code
  if grep -q '^ExecStart=' "$SERVICE_FILE"; then
    sudo sed -i "s|^ExecStart=.*|ExecStart=/home/admin/.npm-global/bin/bos telegram --use-small-units --connect $connection_code|g" "$SERVICE_FILE"
  else
    sudo sed -i "/^\[Service\]/a ExecStart=/home/admin/.npm-global/bin/bos telegram --use-small-units --connect $connection_code" "$SERVICE_FILE"
  fi

  echo "‚úÖ Connection Code inserido com sucesso no servi√ßo bos-telegram."

  # üîÑ Recarrega o systemd e reinicia o servi√ßo
  echo "üîÑ Recarregando daemon do systemd..."
  sudo systemctl daemon-reload

  echo "üöÄ Ativando e iniciando o servi√ßo bos-telegram..."
  sudo systemctl enable bos-telegram
  sudo systemctl start bos-telegram

  echo "‚úÖ Servi√ßo bos-telegram configurado e iniciado com sucesso!"
  echo "üí¨ Verifique se recebeu a mensagem: ü§ñ Connected to <nome do seu node>"
}

tor_acess () {
  TORRC_FILE="/etc/tor/torrc"
  HIDDEN_SERVICE_DIR="/var/lib/tor/hidden_service_lnd_rest"
  SERVICE_BLOCK=$(cat <<EOF
# Hidden Service LND REST
HiddenServiceDir $HIDDEN_SERVICE_DIR
HiddenServiceVersion 3
HiddenServicePoWDefensesEnabled 1
HiddenServicePort 8080 127.0.0.1:8080
EOF
  )

  echo "üöÄ Iniciando configura√ß√£o do servi√ßo oculto do LND REST via Tor..."

  if [[ "$EUID" -ne 0 ]]; then
    echo "‚ùå Por favor, execute como root (sudo)."
    exit 1
  fi

  # Verifica se j√° existe uma configura√ß√£o para o hidden_service_lnd_rest
  if grep -q "$HIDDEN_SERVICE_DIR" "$TORRC_FILE"; then
    echo "‚ôªÔ∏è Configura√ß√£o existente detectada. Atualizando..."
    awk -v block="$SERVICE_BLOCK" '
      BEGIN { updated = 0 }
      $0 ~ /HiddenServiceDir .*hidden_service_lnd_rest/ {
        print block
        skip = 1
        updated = 1
        next
      }
      skip && /^HiddenServicePort/ { skip = 0; next }
      skip { next }
      { print }
      END {
        if (!updated) {
          print block
        }
      }
    ' "$TORRC_FILE" > /tmp/torrc.tmp && mv /tmp/torrc.tmp "$TORRC_FILE"
  else
    echo "‚ûï Adicionando nova entrada ap√≥s o marcador de hidden services..."
    awk -v block="$SERVICE_BLOCK" '
      /## This section is just for location-hidden services ##/ {
        print
        print block
        next
      }
      { print }
    ' "$TORRC_FILE" > /tmp/torrc.tmp && mv /tmp/torrc.tmp "$TORRC_FILE"
  fi

  echo "üîÑ Recarregando o Tor..."
  systemctl reload tor

  echo "‚è≥ Aguardando gera√ß√£o do endere√ßo onion..."
  for i in {1..10}; do
    [[ -f "$HIDDEN_SERVICE_DIR/hostname" ]] && break
    sleep 1
  done

  if [[ -f "$HIDDEN_SERVICE_DIR/hostname" ]]; then
    echo "‚úÖ Endere√ßo onion encontrado:"
    cat "$HIDDEN_SERVICE_DIR/hostname"
  else
    echo "‚ùå Falha ao localizar o hostname. Verifique se o Tor est√° rodando corretamente."
    exit 1
  fi
}

submenu_opcoes() {
  echo -e "${CYAN}üîß Mais op√ß√µes dispon√≠veis:${NC}"
  echo
  echo -e "   ${GREEN}1${NC}- üè† Trocar para o bitcoin local."
  echo -e "   ${GREEN}2${NC}- ‚òÅÔ∏è Trocar para o bitcoin remoto."
  echo -e "   ${GREEN}3${NC}- üî¥ Atualizar e desinstalar programas."
  echo -e "   ${GREEN}4${NC}- üîß Ativar o Bos Telegram no boot do sistema."
  echo -e "   ${GREEN}5${NC}- üîÑ Atualizar interface gr√°fica."
  echo -e "   ${RED}0${NC}- Voltar ao menu principal"
  echo

  read -p "üëâ  Digite sua escolha:     " suboption

  case $suboption in
    1)
      echo -e "${YELLOW}üè† üîÅ Trocar para o bitcoin local...${NC}"
      toggle_on
      echo -e "${GREEN}‚úÖ Servi√ßos reiniciados!${NC}"
      submenu_opcoes
      ;;
    2)
      echo -e "${YELLOW}üîÅ ‚òÅÔ∏è Trocar para o bitcoin remoto...${NC}"
      toggle_off
      echo -e "${GREEN}‚úÖ Atualiza√ß√£o conclu√≠da!${NC}"
      submenu_opcoes
      ;;
    3)
      manutencao_script
      submenu_opcoes
      ;;
    4)
      echo -e "${YELLOW}üîß Configurando o Bos Telegram...${NC}"
      config_bos_telegram
      submenu_opcoes
      ;;
    5)
      echo -e "${YELLOW} Atualizando interface gr√°fica...${NC}"
            app="Gui"
      sudo -v
      echo -e "${CYAN}üöÄ Atualizando interface gr√°fica...${NC}"
      gui_update
      echo -e "\033[43m\033[30m ‚úÖ Interface atualizada com sucesso! \033[0m"
      exit 0
      ;;
    0)
      menu
      ;;
    *)
      echo -e "${RED}‚ùå Op√ß√£o inv√°lida! Tente novamente.${NC}"
      submenu_opcoes
      ;;
  esac
}

radio_update () {
  # Caminho do script que deve rodar a cada hora
  SCRIPT="/home/admin/brlnfullauto/html/radio/radio-update.sh"

  # Linha que ser√° adicionada ao crontab
  CRON_LINE="0 * * * * $SCRIPT >> /var/log/update_radio.log 2>&1"

  # Verifica se j√° existe no crontab
  crontab -l 2>/dev/null | grep -F "$SCRIPT" > /dev/null

  if [ $? -eq 0 ]; then
    echo "‚úÖ A entrada do crontab j√° existe. Nenhuma altera√ß√£o feita."
  else
    echo "‚ûï Adicionando entrada ao crontab..."
    (crontab -l 2>/dev/null; echo "$CRON_LINE") | crontab -
    echo "‚úÖ Entrada adicionada com sucesso!"
  fi
  sudo chmod +x $SCRIPT
}

ip_finder () {
  ip_local=$(hostname -I | awk '{print $1}')
}  

get_network_cidr() {
  interface=$(ip route | grep default | awk '{print $5}')
  if [[ -z "$interface" ]]; then
    echo "Error: No default route found. Please check your network configuration." >&2
    exit 1
  fi

  ip_info=$(ip -o -f inet addr show "$interface" | awk '{print $4}')
  ip_address=$(echo "$ip_info" | cut -d'/' -f1)
  prefix=$(echo "$ip_info" | cut -d'/' -f2)

  IFS='.' read -r o1 o2 o3 o4 <<< "$ip_address"

  mask=$(( 0xFFFFFFFF << (32 - $prefix) & 0xFFFFFFFF ))

  ip_as_int=$(( (o1 << 24) + (o2 << 16) + (o3 << 8) + o4 ))
  network_as_int=$(( ip_as_int & mask ))

  n1=$(( (network_as_int >> 24) & 0xFF ))
  n2=$(( (network_as_int >> 16) & 0xFF ))
  n3=$(( (network_as_int >> 8) & 0xFF ))
  n4=$(( network_as_int & 0xFF ))

  subnet="${n1}.${n2}.${n3}.${n4}/${prefix}"
}

system_detector () {
  arch=$(uname -m)
}

system_preparations () {
  create_main_dir
  configure_ufw
  echo -e "${YELLOW}üïí Isso pode demorar um pouco...${NC}"
  echo -e "${YELLOW}Na pior das hip√≥teses, at√© 30 minutos...${NC}"
  install_tor
  install_nodejs
}

spinner() {
    local pid=$!
    local delay=0.2
    local max=${SPINNER_MAX:-20}
    local count=0
    local spinstr='|/-\\'
    local j=0

    tput civis

    # Monitorar processo
    while kill -0 "$pid" 2>/dev/null; do
        local emoji=""
        for ((i=0; i<=count; i++)); do
            emoji+="‚ö°"
        done

        local spin_char="${spinstr:j:1}"
        j=$(( (j + 1) % 4 ))
        count=$(( (count + 1) % (max + 1) ))

        printf "\r\033[KInstalando $app no seu BRLN bolt...${YELLOW}%s${NC} ${CYAN}[%s]${NC}" "$emoji" "$spin_char"
        sleep "$delay"
    done

    wait "$pid"
    exit_code=$?

    tput cnorm
    if [[ $exit_code -eq 0 ]]; then
        printf "\r\033[K${GREEN}‚úîÔ∏è Processo finalizado com sucesso!${NC}\n"
    else
        printf "\r\033[K${RED}‚ùå Processo finalizado com erro (c√≥digo: $exit_code)${NC}\n"
    fi

    return $exit_code
}

menu() {
  echo
  echo -e "${CYAN}üåü Bem-vindo √† instala√ß√£o de node Lightning personalizado da BRLN! üåü${NC}"
  echo
  echo -e "${YELLOW}‚ö° Este Sript Instalar√° um Node Lightning Standalone${NC}"
  echo -e "  ${GREEN}üõ†Ô∏è Bem Vindo ao Seu Novo Banco, Ele √© BRASILEIRO. ${NC}"
  echo
  echo -e "${YELLOW} Acesse seu n√≥ usando o IP no navegador:${RED} $ip_local${NC}"
  echo -e "${YELLOW} Sua arquitetura √©:${RED} $arch${NC}"
  echo
  echo -e "${YELLOW}üìù Escolha uma op√ß√£o:${NC}"
  echo
  echo -e "   ${GREEN}1${NC}- Instalar Interface de Rede"
  echo -e "   ${GREEN}2${NC}- Instalar Bitcoin Core"
  echo -e "   ${GREEN}3${NC}- Instalar LND & Criar Carteira"
  echo 
  echo -e "${YELLOW} Estas S√£o as Op√ß√µes de Instala√ß√£o de Aplicativos de Administra√ß√£o:${NC}"
  echo
  echo -e "   ${GREEN}4${NC}- Instalar Simple LNWallet - By JVX (Exige LND)"
  echo -e "   ${GREEN}5${NC}- Instalar Thunderhub & Balance of Satoshis (Exige LND)"
  echo -e "   ${GREEN}6${NC}- Instalar Lndg (Exige LND)"
  echo -e "   ${GREEN}7${NC}- Instalar LNbits"
  echo -e "   ${GREEN}8${NC}- Mais op√ß√µes"
  echo -e "   ${RED}0${NC}- Sair"
  echo 
  echo -e "${GREEN} $SCRIPT_VERSION ${NC}"
  echo
  read -p "üëâ   Digite sua escolha:   " option
  echo

  case $option in
    1)
      app="Rede Privada"
      sudo -v
      echo -e "${CYAN}üöÄ Instalando prepara√ß√µes do sistema...${NC}"
      echo -e "${YELLOW}Digite a senha do usu√°rio admin caso solicitado.${NC}" 
      read -p "Deseja exibir logs? (y/n): " verbose_mode
    # For√ßa pedido de password antes do background
      sudo -v
      sudo apt autoremove -y
      if [[ "$verbose_mode" == "y" ]]; then
        system_preparations
      elif [[ "$verbose_mode" == "n" ]]; then
        echo -e "${YELLOW}Aguarde p.f. A instala√ß√£o est√° sendo executada em segundo plano...${NC}"
        echo -e "${YELLOW}üïí ATEN√á√ÉO: Esta etapa pode demorar 10 - 30min. Seja paciente.${NC}"
        system_preparations >> /dev/null 2>&1 &
        pid=$!
        if declare -f spinner > /dev/null; then
          spinner $pid
        else
          echo -e "${RED}Erro: Fun√ß√£o 'spinner' n√£o encontrada.${NC}"
          wait $pid
        fi
        clear
      else
        echo "Op√ß√£o inv√°lida."
      fi      
      wait
      echo -e "\033[43m\033[30m ‚úÖ Instala√ß√£o da interface de rede conclu√≠da! \033[0m"
      menu      
      ;;

    2)
      app="Bitcoin"
      sudo -v
      echo -e "${YELLOW} instalando o bitcoind...${NC}"
      read -p "Escolha sua senha do Bitcoin Core: " "rpcpsswd"
      read -p "Deseja exibir logs? (y/n): " verbose_mode
      if [[ "$verbose_mode" == "y" ]]; then
        install_bitcoind
      elif [[ "$verbose_mode" == "n" ]]; then
        echo -e "${YELLOW} üïí Aguarde p.f.${NC}"
        install_bitcoind >> /dev/null 2>&1 & spinner
        clear
      else
        echo "Op√ß√£o inv√°lida."
        menu
      fi
      echo -e "\033[43m\033[30m ‚úÖ Sua instala√ß√£o do bitcoin core foi bem sucedida! \033[0m"
      menu
      ;;
    3)
      app="Lnd"
      sudo -v
      echo -e "${CYAN}üöÄ Iniciando a instala√ß√£o do LND...${NC}"
      read -p "Digite o nome do seu N√≥ (N√ÉO USE ESPA√áO!): " "alias"
      echo -e "${YELLOW} instalando o lnd...${NC}"
      read -p "Deseja exibir logs? (y/n): " verbose_mode
      if [[ "$verbose_mode" == "y" ]]; then
        download_lnd
      elif [[ "$verbose_mode" == "n" ]]; then
        echo -e "${YELLOW} üïí Aguarde p.f.${NC}"
        download_lnd >> /dev/null 2>&1 & spinner
        clear
      else
        echo "Op√ß√£o inv√°lida."
        menu
      fi
      configure_lnd
      echo -e "\033[43m\033[30m ‚úÖ Sua instala√ß√£o do LND foi bem sucedida! \033[0m"
      menu
      ;;
    4)
      app="Simple Wallet"
      sudo -v
      echo -e "${CYAN}üöÄ Instalando Simple LNWallet...${NC}"
      simple_lnwallet
      echo -e "\033[43m\033[30m ‚úÖ Simple LNWallet instalado com sucesso! \033[0m"
      menu
      ;;
    5)
      app="Balance of Satoshis"
      sudo -v
      echo -e "${CYAN}üöÄ Instalando Balance of Satoshis...${NC}"
      read -p "Deseja exibir logs? (y/n): " verbose_mode
      if [[ "$verbose_mode" == "y" ]]; then
        install_bos
      elif [[ "$verbose_mode" == "n" ]]; then
        echo -e "${YELLOW} üïí Aguarde, isso pode demorar um pouco...${NC}  "
        install_bos >> /dev/null 2>&1 & spinner
        clear
      else
        echo "Op√ß√£o inv√°lida."
        menu
      fi
      echo -e "\033[43m\033[30m ‚úÖ Balance of Satoshis instalado com sucesso! \033[0m"
      echo
      echo -e "${YELLOW}üïí Iniciando a instala√ß√£o do Thunderhub...${NC}"
      read -p "Digite a senha para ThunderHub: " thub_senha
      echo -e "${CYAN}üöÄ Instalando ThunderHub...${NC}"
      read -p "Deseja exibir logs? (y/n): " verbose_mode
      app="Thunderhub"
      if [[ "$verbose_mode" == "y" ]]; then
        install_thunderhub
      elif [[ "$verbose_mode" == "n" ]]; then
        echo -e "${YELLOW} üïí Aguarde, isso poder√° demorar 10min ou mais. Seja paciente...${NC}"
        install_thunderhub >> /dev/null 2>&1 & spinner
        clear
      else
        echo "Op√ß√£o inv√°lida."
        menu
      fi
      echo -e "\033[43m\033[30m ‚úÖ ThunderHub instalado com sucesso! \033[0m"
      menu
      ;;
    6)
      app="Lndg"
      sudo -v
      echo -e "${CYAN}üöÄ Instalando LNDG...${NC}"
      read -p "Deseja exibir logs? (y/n): " verbose_mode
      if [[ "$verbose_mode" == "y" ]]; then
        install_lndg
      elif [[ "$verbose_mode" == "n" ]]; then
        echo -e "${YELLOW} üïí Aguarde, isso pode demorar um pouco...${NC}"
        install_lndg >> /dev/null 2>&1 & spinner
        clear
      else
        echo "Op√ß√£o inv√°lida. Usando o modo padr√£o."
        menu
      fi
      echo -e "${YELLOW}üìù Para acessar o LNDG, use a seguinte senha:${NC}"
      echo
      cat ~/lndg/data/lndg-admin.txt
      echo
      echo
      echo -e "${YELLOW}üìù Voc√™ deve mudar essa senha ao final da instala√ß√£o."
      echo -e "\033[43m\033[30m ‚úÖ LNDG instalado com sucesso! \033[0m"
      menu
      ;;
    7)
      app="Lnbits"
      sudo -v
      echo -e "${CYAN}üöÄ Instalando LNbits...${NC}"
      read -p "Deseja exigir logs? (y/n): " verbose_mode
      if [[ "$verbose_mode" == "y" ]]; then
        lnbits_install
      elif [[ "$verbose_mode" == "n" ]]; then
        echo -e "${YELLOW} üïí Aguarde, isso pode demorar um pouco... Seja paciente.${NC}"
        lnbits_install >> /dev/null 2>&1 & spinner
        clear
      else
        echo "Op√ß√£o inv√°lida."
        menu
      fi
      echo -e "\033[43m\033[30m ‚úÖ LNbits instalado com sucesso! \033[0m"
      menu
      ;;
    8)
      submenu_opcoes
      ;;
    0)
      echo -e "${MAGENTA}üëã Saindo... At√© a pr√≥xima!${NC}"
      exit 0
      ;;
    *)
      echo -e "${RED}‚ùå Op√ß√£o inv√°lida! Tente novamente.${NC}"
      ;;
    esac
  }

system_detector
get_network_cidr
ip_finder
terminal_web
