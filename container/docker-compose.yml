services:
  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/provisioning:/etc/grafana/provisioning
      - ./monitoring/dashboards:/etc/grafana/dashboards
    ports:
      - 3010:3000
    networks:
      - grafana-net
    environment:
      - GF_INSTALL_PLUGINS=grafana-piechart-panel 1.6.4,grafana-clock-panel 2.1.3,grafana-simple-json-datasource 1.4.2
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_PLUGIN_DOWNLOAD_TIMEOUT=300s
    restart: unless-stopped

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   volumes:
  #     - prometheus_data:/etc/prometheus
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - 9090:9090
  #   networks:
  #     - grafana-net
  #   command:
  #     - --config.file=/etc/prometheus/prometheus.yml

  # node-exporter:
  #   image: prom/node-exporter:latest
  #   container_name: node-exporter
  #   ports:
  #     - 9100:9100
  #   networks:
  #       - grafana-net

  # loki:
  #   image: grafana/loki:latest
  #   container_name: loki
  #   ports:
  #     - 3100:3100
  #   networks:
  #     - grafana-net
  #   volumes:
  #     - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml

  # promtail:
  #   image: grafana/promtail:latest
  #   container_name: promtail
  #   networks:
  #     - grafana-net
  #   volumes:
  #     - ./monitoring/promtail-config.yml:/etc/promtail/config.yml

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - 5500:5432
    networks:
      - grafana-net
    volumes:
      - postgres_data:/var/lib/postgresql/data

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/postgres?sslmode=disable"
    ports:
      - 9187:9187
    networks:
      - grafana-net

  tor:
    build:
      context: .
      dockerfile: ./tor/Dockerfile.tor
    container_name: tor
    ports:
      - 9050:9050  # SOCKS proxy
      - 9051:9051  # Control port
    networks:
      - grafana-net
    volumes:
      - tor_data:/run/tor
      - tor_var:/var/lib/tor
    restart: unless-stopped

  bitcoin:
    build:
      context: .
      dockerfile: ./bitcoin/Dockerfile.bitcoin
      args:
        BTC_VERSION: 28.1
        ARCH: x86_64
    container_name: bitcoin
    ports:
      - 8332:8332  # RPC port
      - 8333:8333  # P2P port
      - 28332:28332  # ZMQ rawblock
      - 28333:28333  # ZMQ rawtx
      - 28334:28334  # ZMQ hashtx
      - 28335:28335  # ZMQ hashblock
      # Note: I2P SAM port (7656) is internal only - no need to expose
    networks:
      - grafana-net
    volumes:
      - /data/bitcoin:/data/bitcoin
      - tor_var:/var/lib/tor:ro
      - ./bitcoin/bitcoin.conf.example:/data/bitcoin/bitcoin.conf.example:ro
    restart: unless-stopped
    depends_on:
      - tor
    environment:
      - BITCOIN_DATA=/data/bitcoin
      - BITCOIN_NETWORK=mainnet
    healthcheck:
      test: ["CMD", "bitcoin-cli", "-datadir=/data/bitcoin", "getblockchaininfo"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  lnd:
    build:
      context: .
      dockerfile: ./lnd/Dockerfile.lnd
    container_name: lnd
    ports:
      - 9735:9735  # P2P port
      - 10009:10009  # gRPC port
      - 8080:8080   # REST port
    networks:
      - grafana-net
    volumes:
      - /data/lnd:/data/lnd
      - tor_var:/var/lib/tor:ro
      - /data/lnd:/home/lnd/.lnd
    restart: unless-stopped
    depends_on:
      - tor
    environment:
      - LND_DATA=/data/lnd

  elements:
    build:
      context: .
      dockerfile: ./elements/Dockerfile.elements
    container_name: elements
    ports:
      - 7041:7041   # P2P port
      - 18884:18884 # RPC port
    networks:
      - grafana-net
    volumes:
      - /data/elements:/home/elements/.elements
    restart: unless-stopped
    depends_on:
      - tor
    environment:
      - ELEMENTS_DATA=/home/elements/.elements

  lnbits:
    build:
      context: .
      dockerfile: ./lnbits/Dockerfile.lnbits
    container_name: lnbits
    restart: unless-stopped
    ports:
      - "5000:5000"
    networks:
      - grafana-net
    volumes:
      - /data/lnbits:/data/lnbits
      - /data/lnd:/home/lnd/.lnd:ro
    environment:
      - TZ=UTC
      - LNBITS_DATA_FOLDER=/data/lnbits
      - LNBITS_RATE_LIMIT_NO=200
      - LNBITS_RATE_LIMIT_PER=minute
      - LNBITS_DATABASE_URL=sqlite:////data/lnbits/database.sqlite3
      - LNBITS_SECRET_KEY=your-secret-key-here
      - HOST=0.0.0.0
      - PORT=5000
      - DEBUG=false
    depends_on:
      - lnd
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  lndg:
    build:
      context: .
      dockerfile: ./lndg/Dockerfile.lndg
    container_name: lndg
    ports:
      - 8889:8889   # LNDG Web UI port
    networks:
      - grafana-net
    volumes:
      - /data/lnd:/root/.lnd:ro
      - /data/lndg:/app/data:rw
    restart: unless-stopped
    depends_on:
      - lnd
    environment:
      - LND_RPC_HOST=lnd:10009
      - LND_NETWORK=mainnet

  peerswap:
    build:
      context: .
      dockerfile: ./peerswap/Dockerfile.peerswap
    container_name: peerswap
    ports:
      - 42069:42069  # PeerSwap port
    networks:
      - grafana-net
    volumes:
      - peerswap_data:/home/peerswap/.peerswap
      - ./peerswap/peerswap.conf:/home/peerswap/.peerswap/peerswap.conf
      - /data/lnd:/home/lnd/.lnd:ro
    restart: unless-stopped
    depends_on:
      - lnd
      - elements
    environment:
      - PEERSWAP_DATA=/home/peerswap/.peerswap

  psweb:
    build:
      context: .
      dockerfile: ./psweb/Dockerfile.psweb
    container_name: psweb
    ports:
      - 1984:1984   # PeerSwap Web UI port
    networks:
      - grafana-net
    volumes:
      - psweb_data:/home/psweb/.peerswap
      - /data/lnd:/home/lnd/.lnd:ro
      - peerswap_data:/home/peerswap/.peerswap
    restart: unless-stopped
    depends_on:
      - peerswap
      - lnd
      - elements
    environment:
      - PSWEB_PORT=1984
      - PEERSWAP_HOST=peerswap:42069
      - LND_HOST=lnd:10009

  thunderhub:
    build:
      context: .
      dockerfile: ./thunderhub/Dockerfile.thunderhub
    container_name: thunderhub
    ports:
      - 3000:3000   # ThunderHub Web UI port
    networks:
      - grafana-net
    volumes:
      - thunderhub_data:/data/thunderhub
      - /data/lnd:/data/lnd:ro  # Volume compartilhado com LND para certificados
    restart: unless-stopped
    depends_on:
      - lnd
    environment:
      - THUNDERHUB_PORT=3000
      - LND_HOST=lnd
      - LND_PORT=10009
      - LND_NETWORK=mainnet
      - NODE_ENV=production
      - ACCOUNT_CONFIG_PATH=/data/thunderhub/config/thubConfig_runtime.yaml

  bos:
    build:
      context: .
      dockerfile: ./bos/Dockerfile.bos
    container_name: bos
    ports:
      - 3001:3001   # BOS Web Interface (se necess√°rio)
    networks:
      - grafana-net
    volumes:
      - bos_data:/data/bos
      - /data/lnd:/data/lnd:ro  # Volume compartilhado com LND para certificados
    restart: unless-stopped
    depends_on:
      - lnd
    environment:
      - BOS_MODE=interactive  # Modes: interactive, telegram, daemon
      - NODE_ALIAS=BRLN-Node
      - BOS_TELEGRAM_TOKEN=  # Adicione seu token do Telegram aqui
      - LND_DIR=/data/lnd
      - BOS_DEFAULT_LND_PATH=/data/lnd
    stdin_open: true
    tty: true

networks:
  grafana-net:
    driver: bridge

volumes:
  grafana_data:
  prometheus_data:
  postgres_data:
  tor_data:
  tor_var:
  peerswap_data:
  psweb_data:
  thunderhub_data:
  lndg_data:
  bos_data: